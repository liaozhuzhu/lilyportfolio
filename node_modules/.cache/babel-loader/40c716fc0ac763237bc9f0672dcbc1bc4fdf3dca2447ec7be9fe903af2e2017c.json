{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*! @name m3u8-parser @version 6.0.0 @license Apache-2.0 */\nimport Stream from '@videojs/vhs-utils/es/stream.js';\nimport _extends from '@babel/runtime/helpers/extends';\nimport decodeB64ToUint8Array from '@videojs/vhs-utils/es/decode-b64-to-uint8-array.js';\n\n/**\n * @file m3u8/line-stream.js\n */\n/**\n * A stream that buffers string input and generates a `data` event for each\n * line.\n *\n * @class LineStream\n * @extends Stream\n */\n\nclass LineStream extends Stream {\n  constructor() {\n    super();\n    this.buffer = '';\n  }\n  /**\n   * Add new data to be parsed.\n   *\n   * @param {string} data the text to process\n   */\n\n  push(data) {\n    let nextNewline;\n    this.buffer += data;\n    nextNewline = this.buffer.indexOf('\\n');\n    for (; nextNewline > -1; nextNewline = this.buffer.indexOf('\\n')) {\n      this.trigger('data', this.buffer.substring(0, nextNewline));\n      this.buffer = this.buffer.substring(nextNewline + 1);\n    }\n  }\n}\nconst TAB = String.fromCharCode(0x09);\nconst parseByterange = function (byterangeString) {\n  // optionally match and capture 0+ digits before `@`\n  // optionally match and capture 0+ digits after `@`\n  const match = /([0-9.]*)?@?([0-9.]*)?/.exec(byterangeString || '');\n  const result = {};\n  if (match[1]) {\n    result.length = parseInt(match[1], 10);\n  }\n  if (match[2]) {\n    result.offset = parseInt(match[2], 10);\n  }\n  return result;\n};\n/**\n * \"forgiving\" attribute list psuedo-grammar:\n * attributes -> keyvalue (',' keyvalue)*\n * keyvalue   -> key '=' value\n * key        -> [^=]*\n * value      -> '\"' [^\"]* '\"' | [^,]*\n */\n\nconst attributeSeparator = function () {\n  const key = '[^=]*';\n  const value = '\"[^\"]*\"|[^,]*';\n  const keyvalue = '(?:' + key + ')=(?:' + value + ')';\n  return new RegExp('(?:^|,)(' + keyvalue + ')');\n};\n/**\n * Parse attributes from a line given the separator\n *\n * @param {string} attributes the attribute line to parse\n */\n\nconst parseAttributes = function (attributes) {\n  const result = {};\n  if (!attributes) {\n    return result;\n  } // split the string using attributes as the separator\n\n  const attrs = attributes.split(attributeSeparator());\n  let i = attrs.length;\n  let attr;\n  while (i--) {\n    // filter out unmatched portions of the string\n    if (attrs[i] === '') {\n      continue;\n    } // split the key and value\n\n    attr = /([^=]*)=(.*)/.exec(attrs[i]).slice(1); // trim whitespace and remove optional quotes around the value\n\n    attr[0] = attr[0].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^['\"](.*)['\"]$/g, '$1');\n    result[attr[0]] = attr[1];\n  }\n  return result;\n};\n/**\n * A line-level M3U8 parser event stream. It expects to receive input one\n * line at a time and performs a context-free parse of its contents. A stream\n * interpretation of a manifest can be useful if the manifest is expected to\n * be too large to fit comfortably into memory or the entirety of the input\n * is not immediately available. Otherwise, it's probably much easier to work\n * with a regular `Parser` object.\n *\n * Produces `data` events with an object that captures the parser's\n * interpretation of the input. That object has a property `tag` that is one\n * of `uri`, `comment`, or `tag`. URIs only have a single additional\n * property, `line`, which captures the entirety of the input without\n * interpretation. Comments similarly have a single additional property\n * `text` which is the input without the leading `#`.\n *\n * Tags always have a property `tagType` which is the lower-cased version of\n * the M3U8 directive without the `#EXT` or `#EXT-X-` prefix. For instance,\n * `#EXT-X-MEDIA-SEQUENCE` becomes `media-sequence` when parsed. Unrecognized\n * tags are given the tag type `unknown` and a single additional property\n * `data` with the remainder of the input.\n *\n * @class ParseStream\n * @extends Stream\n */\n\nclass ParseStream extends Stream {\n  constructor() {\n    super();\n    this.customParsers = [];\n    this.tagMappers = [];\n  }\n  /**\n   * Parses an additional line of input.\n   *\n   * @param {string} line a single line of an M3U8 file to parse\n   */\n\n  push(line) {\n    let match;\n    let event; // strip whitespace\n\n    line = line.trim();\n    if (line.length === 0) {\n      // ignore empty lines\n      return;\n    } // URIs\n\n    if (line[0] !== '#') {\n      this.trigger('data', {\n        type: 'uri',\n        uri: line\n      });\n      return;\n    } // map tags\n\n    const newLines = this.tagMappers.reduce((acc, mapper) => {\n      const mappedLine = mapper(line); // skip if unchanged\n\n      if (mappedLine === line) {\n        return acc;\n      }\n      return acc.concat([mappedLine]);\n    }, [line]);\n    newLines.forEach(newLine => {\n      for (let i = 0; i < this.customParsers.length; i++) {\n        if (this.customParsers[i].call(this, newLine)) {\n          return;\n        }\n      } // Comments\n\n      if (newLine.indexOf('#EXT') !== 0) {\n        this.trigger('data', {\n          type: 'comment',\n          text: newLine.slice(1)\n        });\n        return;\n      } // strip off any carriage returns here so the regex matching\n      // doesn't have to account for them.\n\n      newLine = newLine.replace('\\r', ''); // Tags\n\n      match = /^#EXTM3U/.exec(newLine);\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'm3u'\n        });\n        return;\n      }\n      match = /^#EXTINF:([0-9\\.]*)?,?(.*)?$/.exec(newLine);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'inf'\n        };\n        if (match[1]) {\n          event.duration = parseFloat(match[1]);\n        }\n        if (match[2]) {\n          event.title = match[2];\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-TARGETDURATION:([0-9.]*)?/.exec(newLine);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'targetduration'\n        };\n        if (match[1]) {\n          event.duration = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-VERSION:([0-9.]*)?/.exec(newLine);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'version'\n        };\n        if (match[1]) {\n          event.version = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-MEDIA-SEQUENCE:(\\-?[0-9.]*)?/.exec(newLine);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media-sequence'\n        };\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-DISCONTINUITY-SEQUENCE:(\\-?[0-9.]*)?/.exec(newLine);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'discontinuity-sequence'\n        };\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-PLAYLIST-TYPE:(.*)?$/.exec(newLine);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'playlist-type'\n        };\n        if (match[1]) {\n          event.playlistType = match[1];\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-BYTERANGE:(.*)?$/.exec(newLine);\n      if (match) {\n        event = _extends(parseByterange(match[1]), {\n          type: 'tag',\n          tagType: 'byterange'\n        });\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-ALLOW-CACHE:(YES|NO)?/.exec(newLine);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'allow-cache'\n        };\n        if (match[1]) {\n          event.allowed = !/NO/.test(match[1]);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-MAP:(.*)$/.exec(newLine);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'map'\n        };\n        if (match[1]) {\n          const attributes = parseAttributes(match[1]);\n          if (attributes.URI) {\n            event.uri = attributes.URI;\n          }\n          if (attributes.BYTERANGE) {\n            event.byterange = parseByterange(attributes.BYTERANGE);\n          }\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-STREAM-INF:(.*)$/.exec(newLine);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'stream-inf'\n        };\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n          if (event.attributes.RESOLUTION) {\n            const split = event.attributes.RESOLUTION.split('x');\n            const resolution = {};\n            if (split[0]) {\n              resolution.width = parseInt(split[0], 10);\n            }\n            if (split[1]) {\n              resolution.height = parseInt(split[1], 10);\n            }\n            event.attributes.RESOLUTION = resolution;\n          }\n          if (event.attributes.BANDWIDTH) {\n            event.attributes.BANDWIDTH = parseInt(event.attributes.BANDWIDTH, 10);\n          }\n          if (event.attributes['FRAME-RATE']) {\n            event.attributes['FRAME-RATE'] = parseFloat(event.attributes['FRAME-RATE']);\n          }\n          if (event.attributes['PROGRAM-ID']) {\n            event.attributes['PROGRAM-ID'] = parseInt(event.attributes['PROGRAM-ID'], 10);\n          }\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-MEDIA:(.*)$/.exec(newLine);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media'\n        };\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-ENDLIST/.exec(newLine);\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'endlist'\n        });\n        return;\n      }\n      match = /^#EXT-X-DISCONTINUITY/.exec(newLine);\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'discontinuity'\n        });\n        return;\n      }\n      match = /^#EXT-X-PROGRAM-DATE-TIME:(.*)$/.exec(newLine);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'program-date-time'\n        };\n        if (match[1]) {\n          event.dateTimeString = match[1];\n          event.dateTimeObject = new Date(match[1]);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-KEY:(.*)$/.exec(newLine);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'key'\n        };\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]); // parse the IV string into a Uint32Array\n\n          if (event.attributes.IV) {\n            if (event.attributes.IV.substring(0, 2).toLowerCase() === '0x') {\n              event.attributes.IV = event.attributes.IV.substring(2);\n            }\n            event.attributes.IV = event.attributes.IV.match(/.{8}/g);\n            event.attributes.IV[0] = parseInt(event.attributes.IV[0], 16);\n            event.attributes.IV[1] = parseInt(event.attributes.IV[1], 16);\n            event.attributes.IV[2] = parseInt(event.attributes.IV[2], 16);\n            event.attributes.IV[3] = parseInt(event.attributes.IV[3], 16);\n            event.attributes.IV = new Uint32Array(event.attributes.IV);\n          }\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-START:(.*)$/.exec(newLine);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'start'\n        };\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n          event.attributes['TIME-OFFSET'] = parseFloat(event.attributes['TIME-OFFSET']);\n          event.attributes.PRECISE = /YES/.test(event.attributes.PRECISE);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-CUE-OUT-CONT:(.*)?$/.exec(newLine);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out-cont'\n        };\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-CUE-OUT:(.*)?$/.exec(newLine);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out'\n        };\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-CUE-IN:(.*)?$/.exec(newLine);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-in'\n        };\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-SKIP:(.*)$/.exec(newLine);\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'skip'\n        };\n        event.attributes = parseAttributes(match[1]);\n        if (event.attributes.hasOwnProperty('SKIPPED-SEGMENTS')) {\n          event.attributes['SKIPPED-SEGMENTS'] = parseInt(event.attributes['SKIPPED-SEGMENTS'], 10);\n        }\n        if (event.attributes.hasOwnProperty('RECENTLY-REMOVED-DATERANGES')) {\n          event.attributes['RECENTLY-REMOVED-DATERANGES'] = event.attributes['RECENTLY-REMOVED-DATERANGES'].split(TAB);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-PART:(.*)$/.exec(newLine);\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'part'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['DURATION'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseFloat(event.attributes[key]);\n          }\n        });\n        ['INDEPENDENT', 'GAP'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = /YES/.test(event.attributes[key]);\n          }\n        });\n        if (event.attributes.hasOwnProperty('BYTERANGE')) {\n          event.attributes.byterange = parseByterange(event.attributes.BYTERANGE);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-SERVER-CONTROL:(.*)$/.exec(newLine);\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'server-control'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['CAN-SKIP-UNTIL', 'PART-HOLD-BACK', 'HOLD-BACK'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseFloat(event.attributes[key]);\n          }\n        });\n        ['CAN-SKIP-DATERANGES', 'CAN-BLOCK-RELOAD'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = /YES/.test(event.attributes[key]);\n          }\n        });\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-PART-INF:(.*)$/.exec(newLine);\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'part-inf'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['PART-TARGET'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseFloat(event.attributes[key]);\n          }\n        });\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-PRELOAD-HINT:(.*)$/.exec(newLine);\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'preload-hint'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['BYTERANGE-START', 'BYTERANGE-LENGTH'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseInt(event.attributes[key], 10);\n            const subkey = key === 'BYTERANGE-LENGTH' ? 'length' : 'offset';\n            event.attributes.byterange = event.attributes.byterange || {};\n            event.attributes.byterange[subkey] = event.attributes[key]; // only keep the parsed byterange object.\n\n            delete event.attributes[key];\n          }\n        });\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-RENDITION-REPORT:(.*)$/.exec(newLine);\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'rendition-report'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['LAST-MSN', 'LAST-PART'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseInt(event.attributes[key], 10);\n          }\n        });\n        this.trigger('data', event);\n        return;\n      } // unknown tag type\n\n      this.trigger('data', {\n        type: 'tag',\n        data: newLine.slice(4)\n      });\n    });\n  }\n  /**\n   * Add a parser for custom headers\n   *\n   * @param {Object}   options              a map of options for the added parser\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {string}   options.customType   the custom type to register to the output\n   * @param {Function} [options.dataParser] function to parse the line into an object\n   * @param {boolean}  [options.segment]    should tag data be attached to the segment object\n   */\n\n  addParser({\n    expression,\n    customType,\n    dataParser,\n    segment\n  }) {\n    if (typeof dataParser !== 'function') {\n      dataParser = line => line;\n    }\n    this.customParsers.push(line => {\n      const match = expression.exec(line);\n      if (match) {\n        this.trigger('data', {\n          type: 'custom',\n          data: dataParser(line),\n          customType,\n          segment\n        });\n        return true;\n      }\n    });\n  }\n  /**\n   * Add a custom header mapper\n   *\n   * @param {Object}   options\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {Function} options.map          function to translate tag into a different tag\n   */\n\n  addTagMapper({\n    expression,\n    map\n  }) {\n    const mapFn = line => {\n      if (expression.test(line)) {\n        return map(line);\n      }\n      return line;\n    };\n    this.tagMappers.push(mapFn);\n  }\n}\nconst camelCase = str => str.toLowerCase().replace(/-(\\w)/g, a => a[1].toUpperCase());\nconst camelCaseKeys = function (attributes) {\n  const result = {};\n  Object.keys(attributes).forEach(function (key) {\n    result[camelCase(key)] = attributes[key];\n  });\n  return result;\n}; // set SERVER-CONTROL hold back based upon targetDuration and partTargetDuration\n// we need this helper because defaults are based upon targetDuration and\n// partTargetDuration being set, but they may not be if SERVER-CONTROL appears before\n// target durations are set.\n\nconst setHoldBack = function (manifest) {\n  const {\n    serverControl,\n    targetDuration,\n    partTargetDuration\n  } = manifest;\n  if (!serverControl) {\n    return;\n  }\n  const tag = '#EXT-X-SERVER-CONTROL';\n  const hb = 'holdBack';\n  const phb = 'partHoldBack';\n  const minTargetDuration = targetDuration && targetDuration * 3;\n  const minPartDuration = partTargetDuration && partTargetDuration * 2;\n  if (targetDuration && !serverControl.hasOwnProperty(hb)) {\n    serverControl[hb] = minTargetDuration;\n    this.trigger('info', {\n      message: `${tag} defaulting HOLD-BACK to targetDuration * 3 (${minTargetDuration}).`\n    });\n  }\n  if (minTargetDuration && serverControl[hb] < minTargetDuration) {\n    this.trigger('warn', {\n      message: `${tag} clamping HOLD-BACK (${serverControl[hb]}) to targetDuration * 3 (${minTargetDuration})`\n    });\n    serverControl[hb] = minTargetDuration;\n  } // default no part hold back to part target duration * 3\n\n  if (partTargetDuration && !serverControl.hasOwnProperty(phb)) {\n    serverControl[phb] = partTargetDuration * 3;\n    this.trigger('info', {\n      message: `${tag} defaulting PART-HOLD-BACK to partTargetDuration * 3 (${serverControl[phb]}).`\n    });\n  } // if part hold back is too small default it to part target duration * 2\n\n  if (partTargetDuration && serverControl[phb] < minPartDuration) {\n    this.trigger('warn', {\n      message: `${tag} clamping PART-HOLD-BACK (${serverControl[phb]}) to partTargetDuration * 2 (${minPartDuration}).`\n    });\n    serverControl[phb] = minPartDuration;\n  }\n};\n/**\n * A parser for M3U8 files. The current interpretation of the input is\n * exposed as a property `manifest` on parser objects. It's just two lines to\n * create and parse a manifest once you have the contents available as a string:\n *\n * ```js\n * var parser = new m3u8.Parser();\n * parser.push(xhr.responseText);\n * ```\n *\n * New input can later be applied to update the manifest object by calling\n * `push` again.\n *\n * The parser attempts to create a usable manifest object even if the\n * underlying input is somewhat nonsensical. It emits `info` and `warning`\n * events during the parse if it encounters input that seems invalid or\n * requires some property of the manifest object to be defaulted.\n *\n * @class Parser\n * @extends Stream\n */\n\nclass Parser extends Stream {\n  constructor() {\n    super();\n    this.lineStream = new LineStream();\n    this.parseStream = new ParseStream();\n    this.lineStream.pipe(this.parseStream);\n    /* eslint-disable consistent-this */\n\n    const self = this;\n    /* eslint-enable consistent-this */\n\n    const uris = [];\n    let currentUri = {}; // if specified, the active EXT-X-MAP definition\n\n    let currentMap; // if specified, the active decryption key\n\n    let key;\n    let hasParts = false;\n    const noop = function () {};\n    const defaultMediaGroups = {\n      'AUDIO': {},\n      'VIDEO': {},\n      'CLOSED-CAPTIONS': {},\n      'SUBTITLES': {}\n    }; // This is the Widevine UUID from DASH IF IOP. The same exact string is\n    // used in MPDs with Widevine encrypted streams.\n\n    const widevineUuid = 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed'; // group segments into numbered timelines delineated by discontinuities\n\n    let currentTimeline = 0; // the manifest is empty until the parse stream begins delivering data\n\n    this.manifest = {\n      allowCache: true,\n      discontinuityStarts: [],\n      segments: []\n    }; // keep track of the last seen segment's byte range end, as segments are not required\n    // to provide the offset, in which case it defaults to the next byte after the\n    // previous segment\n\n    let lastByterangeEnd = 0; // keep track of the last seen part's byte range end.\n\n    let lastPartByterangeEnd = 0;\n    this.on('end', () => {\n      // only add preloadSegment if we don't yet have a uri for it.\n      // and we actually have parts/preloadHints\n      if (currentUri.uri || !currentUri.parts && !currentUri.preloadHints) {\n        return;\n      }\n      if (!currentUri.map && currentMap) {\n        currentUri.map = currentMap;\n      }\n      if (!currentUri.key && key) {\n        currentUri.key = key;\n      }\n      if (!currentUri.timeline && typeof currentTimeline === 'number') {\n        currentUri.timeline = currentTimeline;\n      }\n      this.manifest.preloadSegment = currentUri;\n    }); // update the manifest with the m3u8 entry from the parse stream\n\n    this.parseStream.on('data', function (entry) {\n      let mediaGroup;\n      let rendition;\n      ({\n        tag() {\n          // switch based on the tag type\n          (({\n            version() {\n              if (entry.version) {\n                this.manifest.version = entry.version;\n              }\n            },\n            'allow-cache'() {\n              this.manifest.allowCache = entry.allowed;\n              if (!('allowed' in entry)) {\n                this.trigger('info', {\n                  message: 'defaulting allowCache to YES'\n                });\n                this.manifest.allowCache = true;\n              }\n            },\n            byterange() {\n              const byterange = {};\n              if ('length' in entry) {\n                currentUri.byterange = byterange;\n                byterange.length = entry.length;\n                if (!('offset' in entry)) {\n                  /*\n                   * From the latest spec (as of this writing):\n                   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.2\n                   *\n                   * Same text since EXT-X-BYTERANGE's introduction in draft 7:\n                   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-07#section-3.3.1)\n                   *\n                   * \"If o [offset] is not present, the sub-range begins at the next byte\n                   * following the sub-range of the previous media segment.\"\n                   */\n                  entry.offset = lastByterangeEnd;\n                }\n              }\n              if ('offset' in entry) {\n                currentUri.byterange = byterange;\n                byterange.offset = entry.offset;\n              }\n              lastByterangeEnd = byterange.offset + byterange.length;\n            },\n            endlist() {\n              this.manifest.endList = true;\n            },\n            inf() {\n              if (!('mediaSequence' in this.manifest)) {\n                this.manifest.mediaSequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting media sequence to zero'\n                });\n              }\n              if (!('discontinuitySequence' in this.manifest)) {\n                this.manifest.discontinuitySequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting discontinuity sequence to zero'\n                });\n              }\n              if (entry.duration > 0) {\n                currentUri.duration = entry.duration;\n              }\n              if (entry.duration === 0) {\n                currentUri.duration = 0.01;\n                this.trigger('info', {\n                  message: 'updating zero segment duration to a small value'\n                });\n              }\n              this.manifest.segments = uris;\n            },\n            key() {\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without attribute list'\n                });\n                return;\n              } // clear the active encryption key\n\n              if (entry.attributes.METHOD === 'NONE') {\n                key = null;\n                return;\n              }\n              if (!entry.attributes.URI) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without URI'\n                });\n                return;\n              }\n              if (entry.attributes.KEYFORMAT === 'com.apple.streamingkeydelivery') {\n                this.manifest.contentProtection = this.manifest.contentProtection || {}; // TODO: add full support for this.\n\n                this.manifest.contentProtection['com.apple.fps.1_0'] = {\n                  attributes: entry.attributes\n                };\n                return;\n              }\n              if (entry.attributes.KEYFORMAT === 'com.microsoft.playready') {\n                this.manifest.contentProtection = this.manifest.contentProtection || {}; // TODO: add full support for this.\n\n                this.manifest.contentProtection['com.microsoft.playready'] = {\n                  uri: entry.attributes.URI\n                };\n                return;\n              } // check if the content is encrypted for Widevine\n              // Widevine/HLS spec: https://storage.googleapis.com/wvdocs/Widevine_DRM_HLS.pdf\n\n              if (entry.attributes.KEYFORMAT === widevineUuid) {\n                const VALID_METHODS = ['SAMPLE-AES', 'SAMPLE-AES-CTR', 'SAMPLE-AES-CENC'];\n                if (VALID_METHODS.indexOf(entry.attributes.METHOD) === -1) {\n                  this.trigger('warn', {\n                    message: 'invalid key method provided for Widevine'\n                  });\n                  return;\n                }\n                if (entry.attributes.METHOD === 'SAMPLE-AES-CENC') {\n                  this.trigger('warn', {\n                    message: 'SAMPLE-AES-CENC is deprecated, please use SAMPLE-AES-CTR instead'\n                  });\n                }\n                if (entry.attributes.URI.substring(0, 23) !== 'data:text/plain;base64,') {\n                  this.trigger('warn', {\n                    message: 'invalid key URI provided for Widevine'\n                  });\n                  return;\n                }\n                if (!(entry.attributes.KEYID && entry.attributes.KEYID.substring(0, 2) === '0x')) {\n                  this.trigger('warn', {\n                    message: 'invalid key ID provided for Widevine'\n                  });\n                  return;\n                } // if Widevine key attributes are valid, store them as `contentProtection`\n                // on the manifest to emulate Widevine tag structure in a DASH mpd\n\n                this.manifest.contentProtection = this.manifest.contentProtection || {};\n                this.manifest.contentProtection['com.widevine.alpha'] = {\n                  attributes: {\n                    schemeIdUri: entry.attributes.KEYFORMAT,\n                    // remove '0x' from the key id string\n                    keyId: entry.attributes.KEYID.substring(2)\n                  },\n                  // decode the base64-encoded PSSH box\n                  pssh: decodeB64ToUint8Array(entry.attributes.URI.split(',')[1])\n                };\n                return;\n              }\n              if (!entry.attributes.METHOD) {\n                this.trigger('warn', {\n                  message: 'defaulting key method to AES-128'\n                });\n              } // setup an encryption key for upcoming segments\n\n              key = {\n                method: entry.attributes.METHOD || 'AES-128',\n                uri: entry.attributes.URI\n              };\n              if (typeof entry.attributes.IV !== 'undefined') {\n                key.iv = entry.attributes.IV;\n              }\n            },\n            'media-sequence'() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid media sequence: ' + entry.number\n                });\n                return;\n              }\n              this.manifest.mediaSequence = entry.number;\n            },\n            'discontinuity-sequence'() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid discontinuity sequence: ' + entry.number\n                });\n                return;\n              }\n              this.manifest.discontinuitySequence = entry.number;\n              currentTimeline = entry.number;\n            },\n            'playlist-type'() {\n              if (!/VOD|EVENT/.test(entry.playlistType)) {\n                this.trigger('warn', {\n                  message: 'ignoring unknown playlist type: ' + entry.playlist\n                });\n                return;\n              }\n              this.manifest.playlistType = entry.playlistType;\n            },\n            map() {\n              currentMap = {};\n              if (entry.uri) {\n                currentMap.uri = entry.uri;\n              }\n              if (entry.byterange) {\n                currentMap.byterange = entry.byterange;\n              }\n              if (key) {\n                currentMap.key = key;\n              }\n            },\n            'stream-inf'() {\n              this.manifest.playlists = uris;\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring empty stream-inf attributes'\n                });\n                return;\n              }\n              if (!currentUri.attributes) {\n                currentUri.attributes = {};\n              }\n              _extends(currentUri.attributes, entry.attributes);\n            },\n            media() {\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n              if (!(entry.attributes && entry.attributes.TYPE && entry.attributes['GROUP-ID'] && entry.attributes.NAME)) {\n                this.trigger('warn', {\n                  message: 'ignoring incomplete or missing media group'\n                });\n                return;\n              } // find the media group, creating defaults as necessary\n\n              const mediaGroupType = this.manifest.mediaGroups[entry.attributes.TYPE];\n              mediaGroupType[entry.attributes['GROUP-ID']] = mediaGroupType[entry.attributes['GROUP-ID']] || {};\n              mediaGroup = mediaGroupType[entry.attributes['GROUP-ID']]; // collect the rendition metadata\n\n              rendition = {\n                default: /yes/i.test(entry.attributes.DEFAULT)\n              };\n              if (rendition.default) {\n                rendition.autoselect = true;\n              } else {\n                rendition.autoselect = /yes/i.test(entry.attributes.AUTOSELECT);\n              }\n              if (entry.attributes.LANGUAGE) {\n                rendition.language = entry.attributes.LANGUAGE;\n              }\n              if (entry.attributes.URI) {\n                rendition.uri = entry.attributes.URI;\n              }\n              if (entry.attributes['INSTREAM-ID']) {\n                rendition.instreamId = entry.attributes['INSTREAM-ID'];\n              }\n              if (entry.attributes.CHARACTERISTICS) {\n                rendition.characteristics = entry.attributes.CHARACTERISTICS;\n              }\n              if (entry.attributes.FORCED) {\n                rendition.forced = /yes/i.test(entry.attributes.FORCED);\n              } // insert the new rendition\n\n              mediaGroup[entry.attributes.NAME] = rendition;\n            },\n            discontinuity() {\n              currentTimeline += 1;\n              currentUri.discontinuity = true;\n              this.manifest.discontinuityStarts.push(uris.length);\n            },\n            'program-date-time'() {\n              if (typeof this.manifest.dateTimeString === 'undefined') {\n                // PROGRAM-DATE-TIME is a media-segment tag, but for backwards\n                // compatibility, we add the first occurence of the PROGRAM-DATE-TIME tag\n                // to the manifest object\n                // TODO: Consider removing this in future major version\n                this.manifest.dateTimeString = entry.dateTimeString;\n                this.manifest.dateTimeObject = entry.dateTimeObject;\n              }\n              currentUri.dateTimeString = entry.dateTimeString;\n              currentUri.dateTimeObject = entry.dateTimeObject;\n            },\n            targetduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid target duration: ' + entry.duration\n                });\n                return;\n              }\n              this.manifest.targetDuration = entry.duration;\n              setHoldBack.call(this, this.manifest);\n            },\n            start() {\n              if (!entry.attributes || isNaN(entry.attributes['TIME-OFFSET'])) {\n                this.trigger('warn', {\n                  message: 'ignoring start declaration without appropriate attribute list'\n                });\n                return;\n              }\n              this.manifest.start = {\n                timeOffset: entry.attributes['TIME-OFFSET'],\n                precise: entry.attributes.PRECISE\n              };\n            },\n            'cue-out'() {\n              currentUri.cueOut = entry.data;\n            },\n            'cue-out-cont'() {\n              currentUri.cueOutCont = entry.data;\n            },\n            'cue-in'() {\n              currentUri.cueIn = entry.data;\n            },\n            'skip'() {\n              this.manifest.skip = camelCaseKeys(entry.attributes);\n              this.warnOnMissingAttributes_('#EXT-X-SKIP', entry.attributes, ['SKIPPED-SEGMENTS']);\n            },\n            'part'() {\n              hasParts = true; // parts are always specifed before a segment\n\n              const segmentIndex = this.manifest.segments.length;\n              const part = camelCaseKeys(entry.attributes);\n              currentUri.parts = currentUri.parts || [];\n              currentUri.parts.push(part);\n              if (part.byterange) {\n                if (!part.byterange.hasOwnProperty('offset')) {\n                  part.byterange.offset = lastPartByterangeEnd;\n                }\n                lastPartByterangeEnd = part.byterange.offset + part.byterange.length;\n              }\n              const partIndex = currentUri.parts.length - 1;\n              this.warnOnMissingAttributes_(`#EXT-X-PART #${partIndex} for segment #${segmentIndex}`, entry.attributes, ['URI', 'DURATION']);\n              if (this.manifest.renditionReports) {\n                this.manifest.renditionReports.forEach((r, i) => {\n                  if (!r.hasOwnProperty('lastPart')) {\n                    this.trigger('warn', {\n                      message: `#EXT-X-RENDITION-REPORT #${i} lacks required attribute(s): LAST-PART`\n                    });\n                  }\n                });\n              }\n            },\n            'server-control'() {\n              const attrs = this.manifest.serverControl = camelCaseKeys(entry.attributes);\n              if (!attrs.hasOwnProperty('canBlockReload')) {\n                attrs.canBlockReload = false;\n                this.trigger('info', {\n                  message: '#EXT-X-SERVER-CONTROL defaulting CAN-BLOCK-RELOAD to false'\n                });\n              }\n              setHoldBack.call(this, this.manifest);\n              if (attrs.canSkipDateranges && !attrs.hasOwnProperty('canSkipUntil')) {\n                this.trigger('warn', {\n                  message: '#EXT-X-SERVER-CONTROL lacks required attribute CAN-SKIP-UNTIL which is required when CAN-SKIP-DATERANGES is set'\n                });\n              }\n            },\n            'preload-hint'() {\n              // parts are always specifed before a segment\n              const segmentIndex = this.manifest.segments.length;\n              const hint = camelCaseKeys(entry.attributes);\n              const isPart = hint.type && hint.type === 'PART';\n              currentUri.preloadHints = currentUri.preloadHints || [];\n              currentUri.preloadHints.push(hint);\n              if (hint.byterange) {\n                if (!hint.byterange.hasOwnProperty('offset')) {\n                  // use last part byterange end or zero if not a part.\n                  hint.byterange.offset = isPart ? lastPartByterangeEnd : 0;\n                  if (isPart) {\n                    lastPartByterangeEnd = hint.byterange.offset + hint.byterange.length;\n                  }\n                }\n              }\n              const index = currentUri.preloadHints.length - 1;\n              this.warnOnMissingAttributes_(`#EXT-X-PRELOAD-HINT #${index} for segment #${segmentIndex}`, entry.attributes, ['TYPE', 'URI']);\n              if (!hint.type) {\n                return;\n              } // search through all preload hints except for the current one for\n              // a duplicate type.\n\n              for (let i = 0; i < currentUri.preloadHints.length - 1; i++) {\n                const otherHint = currentUri.preloadHints[i];\n                if (!otherHint.type) {\n                  continue;\n                }\n                if (otherHint.type === hint.type) {\n                  this.trigger('warn', {\n                    message: `#EXT-X-PRELOAD-HINT #${index} for segment #${segmentIndex} has the same TYPE ${hint.type} as preload hint #${i}`\n                  });\n                }\n              }\n            },\n            'rendition-report'() {\n              const report = camelCaseKeys(entry.attributes);\n              this.manifest.renditionReports = this.manifest.renditionReports || [];\n              this.manifest.renditionReports.push(report);\n              const index = this.manifest.renditionReports.length - 1;\n              const required = ['LAST-MSN', 'URI'];\n              if (hasParts) {\n                required.push('LAST-PART');\n              }\n              this.warnOnMissingAttributes_(`#EXT-X-RENDITION-REPORT #${index}`, entry.attributes, required);\n            },\n            'part-inf'() {\n              this.manifest.partInf = camelCaseKeys(entry.attributes);\n              this.warnOnMissingAttributes_('#EXT-X-PART-INF', entry.attributes, ['PART-TARGET']);\n              if (this.manifest.partInf.partTarget) {\n                this.manifest.partTargetDuration = this.manifest.partInf.partTarget;\n              }\n              setHoldBack.call(this, this.manifest);\n            }\n          })[entry.tagType] || noop).call(self);\n        },\n        uri() {\n          currentUri.uri = entry.uri;\n          uris.push(currentUri); // if no explicit duration was declared, use the target duration\n\n          if (this.manifest.targetDuration && !('duration' in currentUri)) {\n            this.trigger('warn', {\n              message: 'defaulting segment duration to the target duration'\n            });\n            currentUri.duration = this.manifest.targetDuration;\n          } // annotate with encryption information, if necessary\n\n          if (key) {\n            currentUri.key = key;\n          }\n          currentUri.timeline = currentTimeline; // annotate with initialization segment information, if necessary\n\n          if (currentMap) {\n            currentUri.map = currentMap;\n          } // reset the last byterange end as it needs to be 0 between parts\n\n          lastPartByterangeEnd = 0; // prepare for the next URI\n\n          currentUri = {};\n        },\n        comment() {// comments are not important for playback\n        },\n        custom() {\n          // if this is segment-level data attach the output to the segment\n          if (entry.segment) {\n            currentUri.custom = currentUri.custom || {};\n            currentUri.custom[entry.customType] = entry.data; // if this is manifest-level data attach to the top level manifest object\n          } else {\n            this.manifest.custom = this.manifest.custom || {};\n            this.manifest.custom[entry.customType] = entry.data;\n          }\n        }\n      })[entry.type].call(self);\n    });\n  }\n  warnOnMissingAttributes_(identifier, attributes, required) {\n    const missing = [];\n    required.forEach(function (key) {\n      if (!attributes.hasOwnProperty(key)) {\n        missing.push(key);\n      }\n    });\n    if (missing.length) {\n      this.trigger('warn', {\n        message: `${identifier} lacks required attribute(s): ${missing.join(', ')}`\n      });\n    }\n  }\n  /**\n   * Parse the input string and update the manifest object.\n   *\n   * @param {string} chunk a potentially incomplete portion of the manifest\n   */\n\n  push(chunk) {\n    this.lineStream.push(chunk);\n  }\n  /**\n   * Flush any remaining input. This can be handy if the last line of an M3U8\n   * manifest did not contain a trailing newline but the file has been\n   * completely received.\n   */\n\n  end() {\n    // flush any buffered input\n    this.lineStream.push('\\n');\n    this.trigger('end');\n  }\n  /**\n   * Add an additional parser for non-standard tags\n   *\n   * @param {Object}   options              a map of options for the added parser\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {string}   options.type         the type to register to the output\n   * @param {Function} [options.dataParser] function to parse the line into an object\n   * @param {boolean}  [options.segment]    should tag data be attached to the segment object\n   */\n\n  addParser(options) {\n    this.parseStream.addParser(options);\n  }\n  /**\n   * Add a custom header mapper\n   *\n   * @param {Object}   options\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {Function} options.map          function to translate tag into a different tag\n   */\n\n  addTagMapper(options) {\n    this.parseStream.addTagMapper(options);\n  }\n}\nexport { LineStream, ParseStream, Parser };","map":{"version":3,"names":["Stream","_extends","decodeB64ToUint8Array","LineStream","constructor","buffer","push","data","nextNewline","indexOf","trigger","substring","TAB","String","fromCharCode","parseByterange","byterangeString","match","exec","result","length","parseInt","offset","attributeSeparator","key","value","keyvalue","RegExp","parseAttributes","attributes","attrs","split","i","attr","slice","replace","ParseStream","customParsers","tagMappers","line","event","trim","type","uri","newLines","reduce","acc","mapper","mappedLine","concat","forEach","newLine","call","text","tagType","duration","parseFloat","title","version","number","playlistType","allowed","test","URI","BYTERANGE","byterange","RESOLUTION","resolution","width","height","BANDWIDTH","dateTimeString","dateTimeObject","Date","IV","toLowerCase","Uint32Array","PRECISE","hasOwnProperty","subkey","addParser","expression","customType","dataParser","segment","addTagMapper","map","mapFn","camelCase","str","a","toUpperCase","camelCaseKeys","Object","keys","setHoldBack","manifest","serverControl","targetDuration","partTargetDuration","tag","hb","phb","minTargetDuration","minPartDuration","message","Parser","lineStream","parseStream","pipe","self","uris","currentUri","currentMap","hasParts","noop","defaultMediaGroups","widevineUuid","currentTimeline","allowCache","discontinuityStarts","segments","lastByterangeEnd","lastPartByterangeEnd","on","parts","preloadHints","timeline","preloadSegment","entry","mediaGroup","rendition","endlist","endList","inf","mediaSequence","discontinuitySequence","METHOD","KEYFORMAT","contentProtection","VALID_METHODS","KEYID","schemeIdUri","keyId","pssh","method","iv","isFinite","playlist","playlists","mediaGroups","media","TYPE","NAME","mediaGroupType","default","DEFAULT","autoselect","AUTOSELECT","LANGUAGE","language","instreamId","CHARACTERISTICS","characteristics","FORCED","forced","discontinuity","targetduration","start","isNaN","timeOffset","precise","cueOut","cueOutCont","cueIn","skip","warnOnMissingAttributes_","segmentIndex","part","partIndex","renditionReports","r","canBlockReload","canSkipDateranges","hint","isPart","index","otherHint","report","required","partInf","partTarget","comment","custom","identifier","missing","join","chunk","end","options"],"sources":["/Users/liaozhu/cs-projects/lilyportfolio/node_modules/m3u8-parser/dist/m3u8-parser.es.js"],"sourcesContent":["/*! @name m3u8-parser @version 6.0.0 @license Apache-2.0 */\nimport Stream from '@videojs/vhs-utils/es/stream.js';\nimport _extends from '@babel/runtime/helpers/extends';\nimport decodeB64ToUint8Array from '@videojs/vhs-utils/es/decode-b64-to-uint8-array.js';\n\n/**\n * @file m3u8/line-stream.js\n */\n/**\n * A stream that buffers string input and generates a `data` event for each\n * line.\n *\n * @class LineStream\n * @extends Stream\n */\n\nclass LineStream extends Stream {\n  constructor() {\n    super();\n    this.buffer = '';\n  }\n  /**\n   * Add new data to be parsed.\n   *\n   * @param {string} data the text to process\n   */\n\n\n  push(data) {\n    let nextNewline;\n    this.buffer += data;\n    nextNewline = this.buffer.indexOf('\\n');\n\n    for (; nextNewline > -1; nextNewline = this.buffer.indexOf('\\n')) {\n      this.trigger('data', this.buffer.substring(0, nextNewline));\n      this.buffer = this.buffer.substring(nextNewline + 1);\n    }\n  }\n\n}\n\nconst TAB = String.fromCharCode(0x09);\n\nconst parseByterange = function (byterangeString) {\n  // optionally match and capture 0+ digits before `@`\n  // optionally match and capture 0+ digits after `@`\n  const match = /([0-9.]*)?@?([0-9.]*)?/.exec(byterangeString || '');\n  const result = {};\n\n  if (match[1]) {\n    result.length = parseInt(match[1], 10);\n  }\n\n  if (match[2]) {\n    result.offset = parseInt(match[2], 10);\n  }\n\n  return result;\n};\n/**\n * \"forgiving\" attribute list psuedo-grammar:\n * attributes -> keyvalue (',' keyvalue)*\n * keyvalue   -> key '=' value\n * key        -> [^=]*\n * value      -> '\"' [^\"]* '\"' | [^,]*\n */\n\n\nconst attributeSeparator = function () {\n  const key = '[^=]*';\n  const value = '\"[^\"]*\"|[^,]*';\n  const keyvalue = '(?:' + key + ')=(?:' + value + ')';\n  return new RegExp('(?:^|,)(' + keyvalue + ')');\n};\n/**\n * Parse attributes from a line given the separator\n *\n * @param {string} attributes the attribute line to parse\n */\n\n\nconst parseAttributes = function (attributes) {\n  const result = {};\n\n  if (!attributes) {\n    return result;\n  } // split the string using attributes as the separator\n\n\n  const attrs = attributes.split(attributeSeparator());\n  let i = attrs.length;\n  let attr;\n\n  while (i--) {\n    // filter out unmatched portions of the string\n    if (attrs[i] === '') {\n      continue;\n    } // split the key and value\n\n\n    attr = /([^=]*)=(.*)/.exec(attrs[i]).slice(1); // trim whitespace and remove optional quotes around the value\n\n    attr[0] = attr[0].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^['\"](.*)['\"]$/g, '$1');\n    result[attr[0]] = attr[1];\n  }\n\n  return result;\n};\n/**\n * A line-level M3U8 parser event stream. It expects to receive input one\n * line at a time and performs a context-free parse of its contents. A stream\n * interpretation of a manifest can be useful if the manifest is expected to\n * be too large to fit comfortably into memory or the entirety of the input\n * is not immediately available. Otherwise, it's probably much easier to work\n * with a regular `Parser` object.\n *\n * Produces `data` events with an object that captures the parser's\n * interpretation of the input. That object has a property `tag` that is one\n * of `uri`, `comment`, or `tag`. URIs only have a single additional\n * property, `line`, which captures the entirety of the input without\n * interpretation. Comments similarly have a single additional property\n * `text` which is the input without the leading `#`.\n *\n * Tags always have a property `tagType` which is the lower-cased version of\n * the M3U8 directive without the `#EXT` or `#EXT-X-` prefix. For instance,\n * `#EXT-X-MEDIA-SEQUENCE` becomes `media-sequence` when parsed. Unrecognized\n * tags are given the tag type `unknown` and a single additional property\n * `data` with the remainder of the input.\n *\n * @class ParseStream\n * @extends Stream\n */\n\n\nclass ParseStream extends Stream {\n  constructor() {\n    super();\n    this.customParsers = [];\n    this.tagMappers = [];\n  }\n  /**\n   * Parses an additional line of input.\n   *\n   * @param {string} line a single line of an M3U8 file to parse\n   */\n\n\n  push(line) {\n    let match;\n    let event; // strip whitespace\n\n    line = line.trim();\n\n    if (line.length === 0) {\n      // ignore empty lines\n      return;\n    } // URIs\n\n\n    if (line[0] !== '#') {\n      this.trigger('data', {\n        type: 'uri',\n        uri: line\n      });\n      return;\n    } // map tags\n\n\n    const newLines = this.tagMappers.reduce((acc, mapper) => {\n      const mappedLine = mapper(line); // skip if unchanged\n\n      if (mappedLine === line) {\n        return acc;\n      }\n\n      return acc.concat([mappedLine]);\n    }, [line]);\n    newLines.forEach(newLine => {\n      for (let i = 0; i < this.customParsers.length; i++) {\n        if (this.customParsers[i].call(this, newLine)) {\n          return;\n        }\n      } // Comments\n\n\n      if (newLine.indexOf('#EXT') !== 0) {\n        this.trigger('data', {\n          type: 'comment',\n          text: newLine.slice(1)\n        });\n        return;\n      } // strip off any carriage returns here so the regex matching\n      // doesn't have to account for them.\n\n\n      newLine = newLine.replace('\\r', ''); // Tags\n\n      match = /^#EXTM3U/.exec(newLine);\n\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'm3u'\n        });\n        return;\n      }\n\n      match = /^#EXTINF:([0-9\\.]*)?,?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'inf'\n        };\n\n        if (match[1]) {\n          event.duration = parseFloat(match[1]);\n        }\n\n        if (match[2]) {\n          event.title = match[2];\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-TARGETDURATION:([0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'targetduration'\n        };\n\n        if (match[1]) {\n          event.duration = parseInt(match[1], 10);\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-VERSION:([0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'version'\n        };\n\n        if (match[1]) {\n          event.version = parseInt(match[1], 10);\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-MEDIA-SEQUENCE:(\\-?[0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media-sequence'\n        };\n\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-DISCONTINUITY-SEQUENCE:(\\-?[0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'discontinuity-sequence'\n        };\n\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-PLAYLIST-TYPE:(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'playlist-type'\n        };\n\n        if (match[1]) {\n          event.playlistType = match[1];\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-BYTERANGE:(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = _extends(parseByterange(match[1]), {\n          type: 'tag',\n          tagType: 'byterange'\n        });\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-ALLOW-CACHE:(YES|NO)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'allow-cache'\n        };\n\n        if (match[1]) {\n          event.allowed = !/NO/.test(match[1]);\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-MAP:(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'map'\n        };\n\n        if (match[1]) {\n          const attributes = parseAttributes(match[1]);\n\n          if (attributes.URI) {\n            event.uri = attributes.URI;\n          }\n\n          if (attributes.BYTERANGE) {\n            event.byterange = parseByterange(attributes.BYTERANGE);\n          }\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-STREAM-INF:(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'stream-inf'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n\n          if (event.attributes.RESOLUTION) {\n            const split = event.attributes.RESOLUTION.split('x');\n            const resolution = {};\n\n            if (split[0]) {\n              resolution.width = parseInt(split[0], 10);\n            }\n\n            if (split[1]) {\n              resolution.height = parseInt(split[1], 10);\n            }\n\n            event.attributes.RESOLUTION = resolution;\n          }\n\n          if (event.attributes.BANDWIDTH) {\n            event.attributes.BANDWIDTH = parseInt(event.attributes.BANDWIDTH, 10);\n          }\n\n          if (event.attributes['FRAME-RATE']) {\n            event.attributes['FRAME-RATE'] = parseFloat(event.attributes['FRAME-RATE']);\n          }\n\n          if (event.attributes['PROGRAM-ID']) {\n            event.attributes['PROGRAM-ID'] = parseInt(event.attributes['PROGRAM-ID'], 10);\n          }\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-MEDIA:(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-ENDLIST/.exec(newLine);\n\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'endlist'\n        });\n        return;\n      }\n\n      match = /^#EXT-X-DISCONTINUITY/.exec(newLine);\n\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'discontinuity'\n        });\n        return;\n      }\n\n      match = /^#EXT-X-PROGRAM-DATE-TIME:(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'program-date-time'\n        };\n\n        if (match[1]) {\n          event.dateTimeString = match[1];\n          event.dateTimeObject = new Date(match[1]);\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-KEY:(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'key'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]); // parse the IV string into a Uint32Array\n\n          if (event.attributes.IV) {\n            if (event.attributes.IV.substring(0, 2).toLowerCase() === '0x') {\n              event.attributes.IV = event.attributes.IV.substring(2);\n            }\n\n            event.attributes.IV = event.attributes.IV.match(/.{8}/g);\n            event.attributes.IV[0] = parseInt(event.attributes.IV[0], 16);\n            event.attributes.IV[1] = parseInt(event.attributes.IV[1], 16);\n            event.attributes.IV[2] = parseInt(event.attributes.IV[2], 16);\n            event.attributes.IV[3] = parseInt(event.attributes.IV[3], 16);\n            event.attributes.IV = new Uint32Array(event.attributes.IV);\n          }\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-START:(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'start'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n          event.attributes['TIME-OFFSET'] = parseFloat(event.attributes['TIME-OFFSET']);\n          event.attributes.PRECISE = /YES/.test(event.attributes.PRECISE);\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-CUE-OUT-CONT:(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out-cont'\n        };\n\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-CUE-OUT:(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out'\n        };\n\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-CUE-IN:(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-in'\n        };\n\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-SKIP:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'skip'\n        };\n        event.attributes = parseAttributes(match[1]);\n\n        if (event.attributes.hasOwnProperty('SKIPPED-SEGMENTS')) {\n          event.attributes['SKIPPED-SEGMENTS'] = parseInt(event.attributes['SKIPPED-SEGMENTS'], 10);\n        }\n\n        if (event.attributes.hasOwnProperty('RECENTLY-REMOVED-DATERANGES')) {\n          event.attributes['RECENTLY-REMOVED-DATERANGES'] = event.attributes['RECENTLY-REMOVED-DATERANGES'].split(TAB);\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-PART:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'part'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['DURATION'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseFloat(event.attributes[key]);\n          }\n        });\n        ['INDEPENDENT', 'GAP'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = /YES/.test(event.attributes[key]);\n          }\n        });\n\n        if (event.attributes.hasOwnProperty('BYTERANGE')) {\n          event.attributes.byterange = parseByterange(event.attributes.BYTERANGE);\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-SERVER-CONTROL:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'server-control'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['CAN-SKIP-UNTIL', 'PART-HOLD-BACK', 'HOLD-BACK'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseFloat(event.attributes[key]);\n          }\n        });\n        ['CAN-SKIP-DATERANGES', 'CAN-BLOCK-RELOAD'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = /YES/.test(event.attributes[key]);\n          }\n        });\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-PART-INF:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'part-inf'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['PART-TARGET'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseFloat(event.attributes[key]);\n          }\n        });\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-PRELOAD-HINT:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'preload-hint'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['BYTERANGE-START', 'BYTERANGE-LENGTH'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseInt(event.attributes[key], 10);\n            const subkey = key === 'BYTERANGE-LENGTH' ? 'length' : 'offset';\n            event.attributes.byterange = event.attributes.byterange || {};\n            event.attributes.byterange[subkey] = event.attributes[key]; // only keep the parsed byterange object.\n\n            delete event.attributes[key];\n          }\n        });\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-RENDITION-REPORT:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'rendition-report'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['LAST-MSN', 'LAST-PART'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseInt(event.attributes[key], 10);\n          }\n        });\n        this.trigger('data', event);\n        return;\n      } // unknown tag type\n\n\n      this.trigger('data', {\n        type: 'tag',\n        data: newLine.slice(4)\n      });\n    });\n  }\n  /**\n   * Add a parser for custom headers\n   *\n   * @param {Object}   options              a map of options for the added parser\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {string}   options.customType   the custom type to register to the output\n   * @param {Function} [options.dataParser] function to parse the line into an object\n   * @param {boolean}  [options.segment]    should tag data be attached to the segment object\n   */\n\n\n  addParser({\n    expression,\n    customType,\n    dataParser,\n    segment\n  }) {\n    if (typeof dataParser !== 'function') {\n      dataParser = line => line;\n    }\n\n    this.customParsers.push(line => {\n      const match = expression.exec(line);\n\n      if (match) {\n        this.trigger('data', {\n          type: 'custom',\n          data: dataParser(line),\n          customType,\n          segment\n        });\n        return true;\n      }\n    });\n  }\n  /**\n   * Add a custom header mapper\n   *\n   * @param {Object}   options\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {Function} options.map          function to translate tag into a different tag\n   */\n\n\n  addTagMapper({\n    expression,\n    map\n  }) {\n    const mapFn = line => {\n      if (expression.test(line)) {\n        return map(line);\n      }\n\n      return line;\n    };\n\n    this.tagMappers.push(mapFn);\n  }\n\n}\n\nconst camelCase = str => str.toLowerCase().replace(/-(\\w)/g, a => a[1].toUpperCase());\n\nconst camelCaseKeys = function (attributes) {\n  const result = {};\n  Object.keys(attributes).forEach(function (key) {\n    result[camelCase(key)] = attributes[key];\n  });\n  return result;\n}; // set SERVER-CONTROL hold back based upon targetDuration and partTargetDuration\n// we need this helper because defaults are based upon targetDuration and\n// partTargetDuration being set, but they may not be if SERVER-CONTROL appears before\n// target durations are set.\n\n\nconst setHoldBack = function (manifest) {\n  const {\n    serverControl,\n    targetDuration,\n    partTargetDuration\n  } = manifest;\n\n  if (!serverControl) {\n    return;\n  }\n\n  const tag = '#EXT-X-SERVER-CONTROL';\n  const hb = 'holdBack';\n  const phb = 'partHoldBack';\n  const minTargetDuration = targetDuration && targetDuration * 3;\n  const minPartDuration = partTargetDuration && partTargetDuration * 2;\n\n  if (targetDuration && !serverControl.hasOwnProperty(hb)) {\n    serverControl[hb] = minTargetDuration;\n    this.trigger('info', {\n      message: `${tag} defaulting HOLD-BACK to targetDuration * 3 (${minTargetDuration}).`\n    });\n  }\n\n  if (minTargetDuration && serverControl[hb] < minTargetDuration) {\n    this.trigger('warn', {\n      message: `${tag} clamping HOLD-BACK (${serverControl[hb]}) to targetDuration * 3 (${minTargetDuration})`\n    });\n    serverControl[hb] = minTargetDuration;\n  } // default no part hold back to part target duration * 3\n\n\n  if (partTargetDuration && !serverControl.hasOwnProperty(phb)) {\n    serverControl[phb] = partTargetDuration * 3;\n    this.trigger('info', {\n      message: `${tag} defaulting PART-HOLD-BACK to partTargetDuration * 3 (${serverControl[phb]}).`\n    });\n  } // if part hold back is too small default it to part target duration * 2\n\n\n  if (partTargetDuration && serverControl[phb] < minPartDuration) {\n    this.trigger('warn', {\n      message: `${tag} clamping PART-HOLD-BACK (${serverControl[phb]}) to partTargetDuration * 2 (${minPartDuration}).`\n    });\n    serverControl[phb] = minPartDuration;\n  }\n};\n/**\n * A parser for M3U8 files. The current interpretation of the input is\n * exposed as a property `manifest` on parser objects. It's just two lines to\n * create and parse a manifest once you have the contents available as a string:\n *\n * ```js\n * var parser = new m3u8.Parser();\n * parser.push(xhr.responseText);\n * ```\n *\n * New input can later be applied to update the manifest object by calling\n * `push` again.\n *\n * The parser attempts to create a usable manifest object even if the\n * underlying input is somewhat nonsensical. It emits `info` and `warning`\n * events during the parse if it encounters input that seems invalid or\n * requires some property of the manifest object to be defaulted.\n *\n * @class Parser\n * @extends Stream\n */\n\n\nclass Parser extends Stream {\n  constructor() {\n    super();\n    this.lineStream = new LineStream();\n    this.parseStream = new ParseStream();\n    this.lineStream.pipe(this.parseStream);\n    /* eslint-disable consistent-this */\n\n    const self = this;\n    /* eslint-enable consistent-this */\n\n    const uris = [];\n    let currentUri = {}; // if specified, the active EXT-X-MAP definition\n\n    let currentMap; // if specified, the active decryption key\n\n    let key;\n    let hasParts = false;\n\n    const noop = function () {};\n\n    const defaultMediaGroups = {\n      'AUDIO': {},\n      'VIDEO': {},\n      'CLOSED-CAPTIONS': {},\n      'SUBTITLES': {}\n    }; // This is the Widevine UUID from DASH IF IOP. The same exact string is\n    // used in MPDs with Widevine encrypted streams.\n\n    const widevineUuid = 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed'; // group segments into numbered timelines delineated by discontinuities\n\n    let currentTimeline = 0; // the manifest is empty until the parse stream begins delivering data\n\n    this.manifest = {\n      allowCache: true,\n      discontinuityStarts: [],\n      segments: []\n    }; // keep track of the last seen segment's byte range end, as segments are not required\n    // to provide the offset, in which case it defaults to the next byte after the\n    // previous segment\n\n    let lastByterangeEnd = 0; // keep track of the last seen part's byte range end.\n\n    let lastPartByterangeEnd = 0;\n    this.on('end', () => {\n      // only add preloadSegment if we don't yet have a uri for it.\n      // and we actually have parts/preloadHints\n      if (currentUri.uri || !currentUri.parts && !currentUri.preloadHints) {\n        return;\n      }\n\n      if (!currentUri.map && currentMap) {\n        currentUri.map = currentMap;\n      }\n\n      if (!currentUri.key && key) {\n        currentUri.key = key;\n      }\n\n      if (!currentUri.timeline && typeof currentTimeline === 'number') {\n        currentUri.timeline = currentTimeline;\n      }\n\n      this.manifest.preloadSegment = currentUri;\n    }); // update the manifest with the m3u8 entry from the parse stream\n\n    this.parseStream.on('data', function (entry) {\n      let mediaGroup;\n      let rendition;\n      ({\n        tag() {\n          // switch based on the tag type\n          (({\n            version() {\n              if (entry.version) {\n                this.manifest.version = entry.version;\n              }\n            },\n\n            'allow-cache'() {\n              this.manifest.allowCache = entry.allowed;\n\n              if (!('allowed' in entry)) {\n                this.trigger('info', {\n                  message: 'defaulting allowCache to YES'\n                });\n                this.manifest.allowCache = true;\n              }\n            },\n\n            byterange() {\n              const byterange = {};\n\n              if ('length' in entry) {\n                currentUri.byterange = byterange;\n                byterange.length = entry.length;\n\n                if (!('offset' in entry)) {\n                  /*\n                   * From the latest spec (as of this writing):\n                   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.2\n                   *\n                   * Same text since EXT-X-BYTERANGE's introduction in draft 7:\n                   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-07#section-3.3.1)\n                   *\n                   * \"If o [offset] is not present, the sub-range begins at the next byte\n                   * following the sub-range of the previous media segment.\"\n                   */\n                  entry.offset = lastByterangeEnd;\n                }\n              }\n\n              if ('offset' in entry) {\n                currentUri.byterange = byterange;\n                byterange.offset = entry.offset;\n              }\n\n              lastByterangeEnd = byterange.offset + byterange.length;\n            },\n\n            endlist() {\n              this.manifest.endList = true;\n            },\n\n            inf() {\n              if (!('mediaSequence' in this.manifest)) {\n                this.manifest.mediaSequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting media sequence to zero'\n                });\n              }\n\n              if (!('discontinuitySequence' in this.manifest)) {\n                this.manifest.discontinuitySequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting discontinuity sequence to zero'\n                });\n              }\n\n              if (entry.duration > 0) {\n                currentUri.duration = entry.duration;\n              }\n\n              if (entry.duration === 0) {\n                currentUri.duration = 0.01;\n                this.trigger('info', {\n                  message: 'updating zero segment duration to a small value'\n                });\n              }\n\n              this.manifest.segments = uris;\n            },\n\n            key() {\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without attribute list'\n                });\n                return;\n              } // clear the active encryption key\n\n\n              if (entry.attributes.METHOD === 'NONE') {\n                key = null;\n                return;\n              }\n\n              if (!entry.attributes.URI) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without URI'\n                });\n                return;\n              }\n\n              if (entry.attributes.KEYFORMAT === 'com.apple.streamingkeydelivery') {\n                this.manifest.contentProtection = this.manifest.contentProtection || {}; // TODO: add full support for this.\n\n                this.manifest.contentProtection['com.apple.fps.1_0'] = {\n                  attributes: entry.attributes\n                };\n                return;\n              }\n\n              if (entry.attributes.KEYFORMAT === 'com.microsoft.playready') {\n                this.manifest.contentProtection = this.manifest.contentProtection || {}; // TODO: add full support for this.\n\n                this.manifest.contentProtection['com.microsoft.playready'] = {\n                  uri: entry.attributes.URI\n                };\n                return;\n              } // check if the content is encrypted for Widevine\n              // Widevine/HLS spec: https://storage.googleapis.com/wvdocs/Widevine_DRM_HLS.pdf\n\n\n              if (entry.attributes.KEYFORMAT === widevineUuid) {\n                const VALID_METHODS = ['SAMPLE-AES', 'SAMPLE-AES-CTR', 'SAMPLE-AES-CENC'];\n\n                if (VALID_METHODS.indexOf(entry.attributes.METHOD) === -1) {\n                  this.trigger('warn', {\n                    message: 'invalid key method provided for Widevine'\n                  });\n                  return;\n                }\n\n                if (entry.attributes.METHOD === 'SAMPLE-AES-CENC') {\n                  this.trigger('warn', {\n                    message: 'SAMPLE-AES-CENC is deprecated, please use SAMPLE-AES-CTR instead'\n                  });\n                }\n\n                if (entry.attributes.URI.substring(0, 23) !== 'data:text/plain;base64,') {\n                  this.trigger('warn', {\n                    message: 'invalid key URI provided for Widevine'\n                  });\n                  return;\n                }\n\n                if (!(entry.attributes.KEYID && entry.attributes.KEYID.substring(0, 2) === '0x')) {\n                  this.trigger('warn', {\n                    message: 'invalid key ID provided for Widevine'\n                  });\n                  return;\n                } // if Widevine key attributes are valid, store them as `contentProtection`\n                // on the manifest to emulate Widevine tag structure in a DASH mpd\n\n\n                this.manifest.contentProtection = this.manifest.contentProtection || {};\n                this.manifest.contentProtection['com.widevine.alpha'] = {\n                  attributes: {\n                    schemeIdUri: entry.attributes.KEYFORMAT,\n                    // remove '0x' from the key id string\n                    keyId: entry.attributes.KEYID.substring(2)\n                  },\n                  // decode the base64-encoded PSSH box\n                  pssh: decodeB64ToUint8Array(entry.attributes.URI.split(',')[1])\n                };\n                return;\n              }\n\n              if (!entry.attributes.METHOD) {\n                this.trigger('warn', {\n                  message: 'defaulting key method to AES-128'\n                });\n              } // setup an encryption key for upcoming segments\n\n\n              key = {\n                method: entry.attributes.METHOD || 'AES-128',\n                uri: entry.attributes.URI\n              };\n\n              if (typeof entry.attributes.IV !== 'undefined') {\n                key.iv = entry.attributes.IV;\n              }\n            },\n\n            'media-sequence'() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid media sequence: ' + entry.number\n                });\n                return;\n              }\n\n              this.manifest.mediaSequence = entry.number;\n            },\n\n            'discontinuity-sequence'() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid discontinuity sequence: ' + entry.number\n                });\n                return;\n              }\n\n              this.manifest.discontinuitySequence = entry.number;\n              currentTimeline = entry.number;\n            },\n\n            'playlist-type'() {\n              if (!/VOD|EVENT/.test(entry.playlistType)) {\n                this.trigger('warn', {\n                  message: 'ignoring unknown playlist type: ' + entry.playlist\n                });\n                return;\n              }\n\n              this.manifest.playlistType = entry.playlistType;\n            },\n\n            map() {\n              currentMap = {};\n\n              if (entry.uri) {\n                currentMap.uri = entry.uri;\n              }\n\n              if (entry.byterange) {\n                currentMap.byterange = entry.byterange;\n              }\n\n              if (key) {\n                currentMap.key = key;\n              }\n            },\n\n            'stream-inf'() {\n              this.manifest.playlists = uris;\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring empty stream-inf attributes'\n                });\n                return;\n              }\n\n              if (!currentUri.attributes) {\n                currentUri.attributes = {};\n              }\n\n              _extends(currentUri.attributes, entry.attributes);\n            },\n\n            media() {\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!(entry.attributes && entry.attributes.TYPE && entry.attributes['GROUP-ID'] && entry.attributes.NAME)) {\n                this.trigger('warn', {\n                  message: 'ignoring incomplete or missing media group'\n                });\n                return;\n              } // find the media group, creating defaults as necessary\n\n\n              const mediaGroupType = this.manifest.mediaGroups[entry.attributes.TYPE];\n              mediaGroupType[entry.attributes['GROUP-ID']] = mediaGroupType[entry.attributes['GROUP-ID']] || {};\n              mediaGroup = mediaGroupType[entry.attributes['GROUP-ID']]; // collect the rendition metadata\n\n              rendition = {\n                default: /yes/i.test(entry.attributes.DEFAULT)\n              };\n\n              if (rendition.default) {\n                rendition.autoselect = true;\n              } else {\n                rendition.autoselect = /yes/i.test(entry.attributes.AUTOSELECT);\n              }\n\n              if (entry.attributes.LANGUAGE) {\n                rendition.language = entry.attributes.LANGUAGE;\n              }\n\n              if (entry.attributes.URI) {\n                rendition.uri = entry.attributes.URI;\n              }\n\n              if (entry.attributes['INSTREAM-ID']) {\n                rendition.instreamId = entry.attributes['INSTREAM-ID'];\n              }\n\n              if (entry.attributes.CHARACTERISTICS) {\n                rendition.characteristics = entry.attributes.CHARACTERISTICS;\n              }\n\n              if (entry.attributes.FORCED) {\n                rendition.forced = /yes/i.test(entry.attributes.FORCED);\n              } // insert the new rendition\n\n\n              mediaGroup[entry.attributes.NAME] = rendition;\n            },\n\n            discontinuity() {\n              currentTimeline += 1;\n              currentUri.discontinuity = true;\n              this.manifest.discontinuityStarts.push(uris.length);\n            },\n\n            'program-date-time'() {\n              if (typeof this.manifest.dateTimeString === 'undefined') {\n                // PROGRAM-DATE-TIME is a media-segment tag, but for backwards\n                // compatibility, we add the first occurence of the PROGRAM-DATE-TIME tag\n                // to the manifest object\n                // TODO: Consider removing this in future major version\n                this.manifest.dateTimeString = entry.dateTimeString;\n                this.manifest.dateTimeObject = entry.dateTimeObject;\n              }\n\n              currentUri.dateTimeString = entry.dateTimeString;\n              currentUri.dateTimeObject = entry.dateTimeObject;\n            },\n\n            targetduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid target duration: ' + entry.duration\n                });\n                return;\n              }\n\n              this.manifest.targetDuration = entry.duration;\n              setHoldBack.call(this, this.manifest);\n            },\n\n            start() {\n              if (!entry.attributes || isNaN(entry.attributes['TIME-OFFSET'])) {\n                this.trigger('warn', {\n                  message: 'ignoring start declaration without appropriate attribute list'\n                });\n                return;\n              }\n\n              this.manifest.start = {\n                timeOffset: entry.attributes['TIME-OFFSET'],\n                precise: entry.attributes.PRECISE\n              };\n            },\n\n            'cue-out'() {\n              currentUri.cueOut = entry.data;\n            },\n\n            'cue-out-cont'() {\n              currentUri.cueOutCont = entry.data;\n            },\n\n            'cue-in'() {\n              currentUri.cueIn = entry.data;\n            },\n\n            'skip'() {\n              this.manifest.skip = camelCaseKeys(entry.attributes);\n              this.warnOnMissingAttributes_('#EXT-X-SKIP', entry.attributes, ['SKIPPED-SEGMENTS']);\n            },\n\n            'part'() {\n              hasParts = true; // parts are always specifed before a segment\n\n              const segmentIndex = this.manifest.segments.length;\n              const part = camelCaseKeys(entry.attributes);\n              currentUri.parts = currentUri.parts || [];\n              currentUri.parts.push(part);\n\n              if (part.byterange) {\n                if (!part.byterange.hasOwnProperty('offset')) {\n                  part.byterange.offset = lastPartByterangeEnd;\n                }\n\n                lastPartByterangeEnd = part.byterange.offset + part.byterange.length;\n              }\n\n              const partIndex = currentUri.parts.length - 1;\n              this.warnOnMissingAttributes_(`#EXT-X-PART #${partIndex} for segment #${segmentIndex}`, entry.attributes, ['URI', 'DURATION']);\n\n              if (this.manifest.renditionReports) {\n                this.manifest.renditionReports.forEach((r, i) => {\n                  if (!r.hasOwnProperty('lastPart')) {\n                    this.trigger('warn', {\n                      message: `#EXT-X-RENDITION-REPORT #${i} lacks required attribute(s): LAST-PART`\n                    });\n                  }\n                });\n              }\n            },\n\n            'server-control'() {\n              const attrs = this.manifest.serverControl = camelCaseKeys(entry.attributes);\n\n              if (!attrs.hasOwnProperty('canBlockReload')) {\n                attrs.canBlockReload = false;\n                this.trigger('info', {\n                  message: '#EXT-X-SERVER-CONTROL defaulting CAN-BLOCK-RELOAD to false'\n                });\n              }\n\n              setHoldBack.call(this, this.manifest);\n\n              if (attrs.canSkipDateranges && !attrs.hasOwnProperty('canSkipUntil')) {\n                this.trigger('warn', {\n                  message: '#EXT-X-SERVER-CONTROL lacks required attribute CAN-SKIP-UNTIL which is required when CAN-SKIP-DATERANGES is set'\n                });\n              }\n            },\n\n            'preload-hint'() {\n              // parts are always specifed before a segment\n              const segmentIndex = this.manifest.segments.length;\n              const hint = camelCaseKeys(entry.attributes);\n              const isPart = hint.type && hint.type === 'PART';\n              currentUri.preloadHints = currentUri.preloadHints || [];\n              currentUri.preloadHints.push(hint);\n\n              if (hint.byterange) {\n                if (!hint.byterange.hasOwnProperty('offset')) {\n                  // use last part byterange end or zero if not a part.\n                  hint.byterange.offset = isPart ? lastPartByterangeEnd : 0;\n\n                  if (isPart) {\n                    lastPartByterangeEnd = hint.byterange.offset + hint.byterange.length;\n                  }\n                }\n              }\n\n              const index = currentUri.preloadHints.length - 1;\n              this.warnOnMissingAttributes_(`#EXT-X-PRELOAD-HINT #${index} for segment #${segmentIndex}`, entry.attributes, ['TYPE', 'URI']);\n\n              if (!hint.type) {\n                return;\n              } // search through all preload hints except for the current one for\n              // a duplicate type.\n\n\n              for (let i = 0; i < currentUri.preloadHints.length - 1; i++) {\n                const otherHint = currentUri.preloadHints[i];\n\n                if (!otherHint.type) {\n                  continue;\n                }\n\n                if (otherHint.type === hint.type) {\n                  this.trigger('warn', {\n                    message: `#EXT-X-PRELOAD-HINT #${index} for segment #${segmentIndex} has the same TYPE ${hint.type} as preload hint #${i}`\n                  });\n                }\n              }\n            },\n\n            'rendition-report'() {\n              const report = camelCaseKeys(entry.attributes);\n              this.manifest.renditionReports = this.manifest.renditionReports || [];\n              this.manifest.renditionReports.push(report);\n              const index = this.manifest.renditionReports.length - 1;\n              const required = ['LAST-MSN', 'URI'];\n\n              if (hasParts) {\n                required.push('LAST-PART');\n              }\n\n              this.warnOnMissingAttributes_(`#EXT-X-RENDITION-REPORT #${index}`, entry.attributes, required);\n            },\n\n            'part-inf'() {\n              this.manifest.partInf = camelCaseKeys(entry.attributes);\n              this.warnOnMissingAttributes_('#EXT-X-PART-INF', entry.attributes, ['PART-TARGET']);\n\n              if (this.manifest.partInf.partTarget) {\n                this.manifest.partTargetDuration = this.manifest.partInf.partTarget;\n              }\n\n              setHoldBack.call(this, this.manifest);\n            }\n\n          })[entry.tagType] || noop).call(self);\n        },\n\n        uri() {\n          currentUri.uri = entry.uri;\n          uris.push(currentUri); // if no explicit duration was declared, use the target duration\n\n          if (this.manifest.targetDuration && !('duration' in currentUri)) {\n            this.trigger('warn', {\n              message: 'defaulting segment duration to the target duration'\n            });\n            currentUri.duration = this.manifest.targetDuration;\n          } // annotate with encryption information, if necessary\n\n\n          if (key) {\n            currentUri.key = key;\n          }\n\n          currentUri.timeline = currentTimeline; // annotate with initialization segment information, if necessary\n\n          if (currentMap) {\n            currentUri.map = currentMap;\n          } // reset the last byterange end as it needs to be 0 between parts\n\n\n          lastPartByterangeEnd = 0; // prepare for the next URI\n\n          currentUri = {};\n        },\n\n        comment() {// comments are not important for playback\n        },\n\n        custom() {\n          // if this is segment-level data attach the output to the segment\n          if (entry.segment) {\n            currentUri.custom = currentUri.custom || {};\n            currentUri.custom[entry.customType] = entry.data; // if this is manifest-level data attach to the top level manifest object\n          } else {\n            this.manifest.custom = this.manifest.custom || {};\n            this.manifest.custom[entry.customType] = entry.data;\n          }\n        }\n\n      })[entry.type].call(self);\n    });\n  }\n\n  warnOnMissingAttributes_(identifier, attributes, required) {\n    const missing = [];\n    required.forEach(function (key) {\n      if (!attributes.hasOwnProperty(key)) {\n        missing.push(key);\n      }\n    });\n\n    if (missing.length) {\n      this.trigger('warn', {\n        message: `${identifier} lacks required attribute(s): ${missing.join(', ')}`\n      });\n    }\n  }\n  /**\n   * Parse the input string and update the manifest object.\n   *\n   * @param {string} chunk a potentially incomplete portion of the manifest\n   */\n\n\n  push(chunk) {\n    this.lineStream.push(chunk);\n  }\n  /**\n   * Flush any remaining input. This can be handy if the last line of an M3U8\n   * manifest did not contain a trailing newline but the file has been\n   * completely received.\n   */\n\n\n  end() {\n    // flush any buffered input\n    this.lineStream.push('\\n');\n    this.trigger('end');\n  }\n  /**\n   * Add an additional parser for non-standard tags\n   *\n   * @param {Object}   options              a map of options for the added parser\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {string}   options.type         the type to register to the output\n   * @param {Function} [options.dataParser] function to parse the line into an object\n   * @param {boolean}  [options.segment]    should tag data be attached to the segment object\n   */\n\n\n  addParser(options) {\n    this.parseStream.addParser(options);\n  }\n  /**\n   * Add a custom header mapper\n   *\n   * @param {Object}   options\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {Function} options.map          function to translate tag into a different tag\n   */\n\n\n  addTagMapper(options) {\n    this.parseStream.addTagMapper(options);\n  }\n\n}\n\nexport { LineStream, ParseStream, Parser };\n"],"mappings":";AAAA;AACA,OAAOA,MAAM,MAAM,iCAAiC;AACpD,OAAOC,QAAQ,MAAM,gCAAgC;AACrD,OAAOC,qBAAqB,MAAM,oDAAoD;;AAEtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,UAAU,SAASH,MAAM,CAAC;EAC9BI,WAAW,GAAG;IACZ,KAAK,EAAE;IACP,IAAI,CAACC,MAAM,GAAG,EAAE;EAClB;EACA;AACF;AACA;AACA;AACA;;EAGEC,IAAI,CAACC,IAAI,EAAE;IACT,IAAIC,WAAW;IACf,IAAI,CAACH,MAAM,IAAIE,IAAI;IACnBC,WAAW,GAAG,IAAI,CAACH,MAAM,CAACI,OAAO,CAAC,IAAI,CAAC;IAEvC,OAAOD,WAAW,GAAG,CAAC,CAAC,EAAEA,WAAW,GAAG,IAAI,CAACH,MAAM,CAACI,OAAO,CAAC,IAAI,CAAC,EAAE;MAChE,IAAI,CAACC,OAAO,CAAC,MAAM,EAAE,IAAI,CAACL,MAAM,CAACM,SAAS,CAAC,CAAC,EAAEH,WAAW,CAAC,CAAC;MAC3D,IAAI,CAACH,MAAM,GAAG,IAAI,CAACA,MAAM,CAACM,SAAS,CAACH,WAAW,GAAG,CAAC,CAAC;IACtD;EACF;AAEF;AAEA,MAAMI,GAAG,GAAGC,MAAM,CAACC,YAAY,CAAC,IAAI,CAAC;AAErC,MAAMC,cAAc,GAAG,UAAUC,eAAe,EAAE;EAChD;EACA;EACA,MAAMC,KAAK,GAAG,wBAAwB,CAACC,IAAI,CAACF,eAAe,IAAI,EAAE,CAAC;EAClE,MAAMG,MAAM,GAAG,CAAC,CAAC;EAEjB,IAAIF,KAAK,CAAC,CAAC,CAAC,EAAE;IACZE,MAAM,CAACC,MAAM,GAAGC,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;EACxC;EAEA,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;IACZE,MAAM,CAACG,MAAM,GAAGD,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;EACxC;EAEA,OAAOE,MAAM;AACf,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMI,kBAAkB,GAAG,YAAY;EACrC,MAAMC,GAAG,GAAG,OAAO;EACnB,MAAMC,KAAK,GAAG,eAAe;EAC7B,MAAMC,QAAQ,GAAG,KAAK,GAAGF,GAAG,GAAG,OAAO,GAAGC,KAAK,GAAG,GAAG;EACpD,OAAO,IAAIE,MAAM,CAAC,UAAU,GAAGD,QAAQ,GAAG,GAAG,CAAC;AAChD,CAAC;AACD;AACA;AACA;AACA;AACA;;AAGA,MAAME,eAAe,GAAG,UAAUC,UAAU,EAAE;EAC5C,MAAMV,MAAM,GAAG,CAAC,CAAC;EAEjB,IAAI,CAACU,UAAU,EAAE;IACf,OAAOV,MAAM;EACf,CAAC,CAAC;;EAGF,MAAMW,KAAK,GAAGD,UAAU,CAACE,KAAK,CAACR,kBAAkB,EAAE,CAAC;EACpD,IAAIS,CAAC,GAAGF,KAAK,CAACV,MAAM;EACpB,IAAIa,IAAI;EAER,OAAOD,CAAC,EAAE,EAAE;IACV;IACA,IAAIF,KAAK,CAACE,CAAC,CAAC,KAAK,EAAE,EAAE;MACnB;IACF,CAAC,CAAC;;IAGFC,IAAI,GAAG,cAAc,CAACf,IAAI,CAACY,KAAK,CAACE,CAAC,CAAC,CAAC,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;IAE/CD,IAAI,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC,CAACE,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC;IAC3CF,IAAI,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC,CAACE,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC;IAC3CF,IAAI,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC,CAACE,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAAC;IAClDhB,MAAM,CAACc,IAAI,CAAC,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC;EAC3B;EAEA,OAAOd,MAAM;AACf,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMiB,WAAW,SAASpC,MAAM,CAAC;EAC/BI,WAAW,GAAG;IACZ,KAAK,EAAE;IACP,IAAI,CAACiC,aAAa,GAAG,EAAE;IACvB,IAAI,CAACC,UAAU,GAAG,EAAE;EACtB;EACA;AACF;AACA;AACA;AACA;;EAGEhC,IAAI,CAACiC,IAAI,EAAE;IACT,IAAItB,KAAK;IACT,IAAIuB,KAAK,CAAC,CAAC;;IAEXD,IAAI,GAAGA,IAAI,CAACE,IAAI,EAAE;IAElB,IAAIF,IAAI,CAACnB,MAAM,KAAK,CAAC,EAAE;MACrB;MACA;IACF,CAAC,CAAC;;IAGF,IAAImB,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACnB,IAAI,CAAC7B,OAAO,CAAC,MAAM,EAAE;QACnBgC,IAAI,EAAE,KAAK;QACXC,GAAG,EAAEJ;MACP,CAAC,CAAC;MACF;IACF,CAAC,CAAC;;IAGF,MAAMK,QAAQ,GAAG,IAAI,CAACN,UAAU,CAACO,MAAM,CAAC,CAACC,GAAG,EAAEC,MAAM,KAAK;MACvD,MAAMC,UAAU,GAAGD,MAAM,CAACR,IAAI,CAAC,CAAC,CAAC;;MAEjC,IAAIS,UAAU,KAAKT,IAAI,EAAE;QACvB,OAAOO,GAAG;MACZ;MAEA,OAAOA,GAAG,CAACG,MAAM,CAAC,CAACD,UAAU,CAAC,CAAC;IACjC,CAAC,EAAE,CAACT,IAAI,CAAC,CAAC;IACVK,QAAQ,CAACM,OAAO,CAACC,OAAO,IAAI;MAC1B,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACK,aAAa,CAACjB,MAAM,EAAEY,CAAC,EAAE,EAAE;QAClD,IAAI,IAAI,CAACK,aAAa,CAACL,CAAC,CAAC,CAACoB,IAAI,CAAC,IAAI,EAAED,OAAO,CAAC,EAAE;UAC7C;QACF;MACF,CAAC,CAAC;;MAGF,IAAIA,OAAO,CAAC1C,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;QACjC,IAAI,CAACC,OAAO,CAAC,MAAM,EAAE;UACnBgC,IAAI,EAAE,SAAS;UACfW,IAAI,EAAEF,OAAO,CAACjB,KAAK,CAAC,CAAC;QACvB,CAAC,CAAC;QACF;MACF,CAAC,CAAC;MACF;;MAGAiB,OAAO,GAAGA,OAAO,CAAChB,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;;MAErClB,KAAK,GAAG,UAAU,CAACC,IAAI,CAACiC,OAAO,CAAC;MAEhC,IAAIlC,KAAK,EAAE;QACT,IAAI,CAACP,OAAO,CAAC,MAAM,EAAE;UACnBgC,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC,CAAC;QACF;MACF;MAEArC,KAAK,GAAG,8BAA8B,CAACC,IAAI,CAACiC,OAAO,CAAC;MAEpD,IAAIlC,KAAK,EAAE;QACTuB,KAAK,GAAG;UACNE,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC;QAED,IAAIrC,KAAK,CAAC,CAAC,CAAC,EAAE;UACZuB,KAAK,CAACe,QAAQ,GAAGC,UAAU,CAACvC,KAAK,CAAC,CAAC,CAAC,CAAC;QACvC;QAEA,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;UACZuB,KAAK,CAACiB,KAAK,GAAGxC,KAAK,CAAC,CAAC,CAAC;QACxB;QAEA,IAAI,CAACP,OAAO,CAAC,MAAM,EAAE8B,KAAK,CAAC;QAC3B;MACF;MAEAvB,KAAK,GAAG,mCAAmC,CAACC,IAAI,CAACiC,OAAO,CAAC;MAEzD,IAAIlC,KAAK,EAAE;QACTuB,KAAK,GAAG;UACNE,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC;QAED,IAAIrC,KAAK,CAAC,CAAC,CAAC,EAAE;UACZuB,KAAK,CAACe,QAAQ,GAAGlC,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACzC;QAEA,IAAI,CAACP,OAAO,CAAC,MAAM,EAAE8B,KAAK,CAAC;QAC3B;MACF;MAEAvB,KAAK,GAAG,4BAA4B,CAACC,IAAI,CAACiC,OAAO,CAAC;MAElD,IAAIlC,KAAK,EAAE;QACTuB,KAAK,GAAG;UACNE,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC;QAED,IAAIrC,KAAK,CAAC,CAAC,CAAC,EAAE;UACZuB,KAAK,CAACkB,OAAO,GAAGrC,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACxC;QAEA,IAAI,CAACP,OAAO,CAAC,MAAM,EAAE8B,KAAK,CAAC;QAC3B;MACF;MAEAvB,KAAK,GAAG,sCAAsC,CAACC,IAAI,CAACiC,OAAO,CAAC;MAE5D,IAAIlC,KAAK,EAAE;QACTuB,KAAK,GAAG;UACNE,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC;QAED,IAAIrC,KAAK,CAAC,CAAC,CAAC,EAAE;UACZuB,KAAK,CAACmB,MAAM,GAAGtC,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACvC;QAEA,IAAI,CAACP,OAAO,CAAC,MAAM,EAAE8B,KAAK,CAAC;QAC3B;MACF;MAEAvB,KAAK,GAAG,8CAA8C,CAACC,IAAI,CAACiC,OAAO,CAAC;MAEpE,IAAIlC,KAAK,EAAE;QACTuB,KAAK,GAAG;UACNE,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC;QAED,IAAIrC,KAAK,CAAC,CAAC,CAAC,EAAE;UACZuB,KAAK,CAACmB,MAAM,GAAGtC,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACvC;QAEA,IAAI,CAACP,OAAO,CAAC,MAAM,EAAE8B,KAAK,CAAC;QAC3B;MACF;MAEAvB,KAAK,GAAG,8BAA8B,CAACC,IAAI,CAACiC,OAAO,CAAC;MAEpD,IAAIlC,KAAK,EAAE;QACTuB,KAAK,GAAG;UACNE,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC;QAED,IAAIrC,KAAK,CAAC,CAAC,CAAC,EAAE;UACZuB,KAAK,CAACoB,YAAY,GAAG3C,KAAK,CAAC,CAAC,CAAC;QAC/B;QAEA,IAAI,CAACP,OAAO,CAAC,MAAM,EAAE8B,KAAK,CAAC;QAC3B;MACF;MAEAvB,KAAK,GAAG,0BAA0B,CAACC,IAAI,CAACiC,OAAO,CAAC;MAEhD,IAAIlC,KAAK,EAAE;QACTuB,KAAK,GAAGvC,QAAQ,CAACc,cAAc,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;UACzCyB,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC,CAAC;QACF,IAAI,CAAC5C,OAAO,CAAC,MAAM,EAAE8B,KAAK,CAAC;QAC3B;MACF;MAEAvB,KAAK,GAAG,+BAA+B,CAACC,IAAI,CAACiC,OAAO,CAAC;MAErD,IAAIlC,KAAK,EAAE;QACTuB,KAAK,GAAG;UACNE,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC;QAED,IAAIrC,KAAK,CAAC,CAAC,CAAC,EAAE;UACZuB,KAAK,CAACqB,OAAO,GAAG,CAAC,IAAI,CAACC,IAAI,CAAC7C,KAAK,CAAC,CAAC,CAAC,CAAC;QACtC;QAEA,IAAI,CAACP,OAAO,CAAC,MAAM,EAAE8B,KAAK,CAAC;QAC3B;MACF;MAEAvB,KAAK,GAAG,mBAAmB,CAACC,IAAI,CAACiC,OAAO,CAAC;MAEzC,IAAIlC,KAAK,EAAE;QACTuB,KAAK,GAAG;UACNE,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC;QAED,IAAIrC,KAAK,CAAC,CAAC,CAAC,EAAE;UACZ,MAAMY,UAAU,GAAGD,eAAe,CAACX,KAAK,CAAC,CAAC,CAAC,CAAC;UAE5C,IAAIY,UAAU,CAACkC,GAAG,EAAE;YAClBvB,KAAK,CAACG,GAAG,GAAGd,UAAU,CAACkC,GAAG;UAC5B;UAEA,IAAIlC,UAAU,CAACmC,SAAS,EAAE;YACxBxB,KAAK,CAACyB,SAAS,GAAGlD,cAAc,CAACc,UAAU,CAACmC,SAAS,CAAC;UACxD;QACF;QAEA,IAAI,CAACtD,OAAO,CAAC,MAAM,EAAE8B,KAAK,CAAC;QAC3B;MACF;MAEAvB,KAAK,GAAG,0BAA0B,CAACC,IAAI,CAACiC,OAAO,CAAC;MAEhD,IAAIlC,KAAK,EAAE;QACTuB,KAAK,GAAG;UACNE,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC;QAED,IAAIrC,KAAK,CAAC,CAAC,CAAC,EAAE;UACZuB,KAAK,CAACX,UAAU,GAAGD,eAAe,CAACX,KAAK,CAAC,CAAC,CAAC,CAAC;UAE5C,IAAIuB,KAAK,CAACX,UAAU,CAACqC,UAAU,EAAE;YAC/B,MAAMnC,KAAK,GAAGS,KAAK,CAACX,UAAU,CAACqC,UAAU,CAACnC,KAAK,CAAC,GAAG,CAAC;YACpD,MAAMoC,UAAU,GAAG,CAAC,CAAC;YAErB,IAAIpC,KAAK,CAAC,CAAC,CAAC,EAAE;cACZoC,UAAU,CAACC,KAAK,GAAG/C,QAAQ,CAACU,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;YAC3C;YAEA,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;cACZoC,UAAU,CAACE,MAAM,GAAGhD,QAAQ,CAACU,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;YAC5C;YAEAS,KAAK,CAACX,UAAU,CAACqC,UAAU,GAAGC,UAAU;UAC1C;UAEA,IAAI3B,KAAK,CAACX,UAAU,CAACyC,SAAS,EAAE;YAC9B9B,KAAK,CAACX,UAAU,CAACyC,SAAS,GAAGjD,QAAQ,CAACmB,KAAK,CAACX,UAAU,CAACyC,SAAS,EAAE,EAAE,CAAC;UACvE;UAEA,IAAI9B,KAAK,CAACX,UAAU,CAAC,YAAY,CAAC,EAAE;YAClCW,KAAK,CAACX,UAAU,CAAC,YAAY,CAAC,GAAG2B,UAAU,CAAChB,KAAK,CAACX,UAAU,CAAC,YAAY,CAAC,CAAC;UAC7E;UAEA,IAAIW,KAAK,CAACX,UAAU,CAAC,YAAY,CAAC,EAAE;YAClCW,KAAK,CAACX,UAAU,CAAC,YAAY,CAAC,GAAGR,QAAQ,CAACmB,KAAK,CAACX,UAAU,CAAC,YAAY,CAAC,EAAE,EAAE,CAAC;UAC/E;QACF;QAEA,IAAI,CAACnB,OAAO,CAAC,MAAM,EAAE8B,KAAK,CAAC;QAC3B;MACF;MAEAvB,KAAK,GAAG,qBAAqB,CAACC,IAAI,CAACiC,OAAO,CAAC;MAE3C,IAAIlC,KAAK,EAAE;QACTuB,KAAK,GAAG;UACNE,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC;QAED,IAAIrC,KAAK,CAAC,CAAC,CAAC,EAAE;UACZuB,KAAK,CAACX,UAAU,GAAGD,eAAe,CAACX,KAAK,CAAC,CAAC,CAAC,CAAC;QAC9C;QAEA,IAAI,CAACP,OAAO,CAAC,MAAM,EAAE8B,KAAK,CAAC;QAC3B;MACF;MAEAvB,KAAK,GAAG,iBAAiB,CAACC,IAAI,CAACiC,OAAO,CAAC;MAEvC,IAAIlC,KAAK,EAAE;QACT,IAAI,CAACP,OAAO,CAAC,MAAM,EAAE;UACnBgC,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC,CAAC;QACF;MACF;MAEArC,KAAK,GAAG,uBAAuB,CAACC,IAAI,CAACiC,OAAO,CAAC;MAE7C,IAAIlC,KAAK,EAAE;QACT,IAAI,CAACP,OAAO,CAAC,MAAM,EAAE;UACnBgC,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC,CAAC;QACF;MACF;MAEArC,KAAK,GAAG,iCAAiC,CAACC,IAAI,CAACiC,OAAO,CAAC;MAEvD,IAAIlC,KAAK,EAAE;QACTuB,KAAK,GAAG;UACNE,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC;QAED,IAAIrC,KAAK,CAAC,CAAC,CAAC,EAAE;UACZuB,KAAK,CAAC+B,cAAc,GAAGtD,KAAK,CAAC,CAAC,CAAC;UAC/BuB,KAAK,CAACgC,cAAc,GAAG,IAAIC,IAAI,CAACxD,KAAK,CAAC,CAAC,CAAC,CAAC;QAC3C;QAEA,IAAI,CAACP,OAAO,CAAC,MAAM,EAAE8B,KAAK,CAAC;QAC3B;MACF;MAEAvB,KAAK,GAAG,mBAAmB,CAACC,IAAI,CAACiC,OAAO,CAAC;MAEzC,IAAIlC,KAAK,EAAE;QACTuB,KAAK,GAAG;UACNE,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC;QAED,IAAIrC,KAAK,CAAC,CAAC,CAAC,EAAE;UACZuB,KAAK,CAACX,UAAU,GAAGD,eAAe,CAACX,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;UAE9C,IAAIuB,KAAK,CAACX,UAAU,CAAC6C,EAAE,EAAE;YACvB,IAAIlC,KAAK,CAACX,UAAU,CAAC6C,EAAE,CAAC/D,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAACgE,WAAW,EAAE,KAAK,IAAI,EAAE;cAC9DnC,KAAK,CAACX,UAAU,CAAC6C,EAAE,GAAGlC,KAAK,CAACX,UAAU,CAAC6C,EAAE,CAAC/D,SAAS,CAAC,CAAC,CAAC;YACxD;YAEA6B,KAAK,CAACX,UAAU,CAAC6C,EAAE,GAAGlC,KAAK,CAACX,UAAU,CAAC6C,EAAE,CAACzD,KAAK,CAAC,OAAO,CAAC;YACxDuB,KAAK,CAACX,UAAU,CAAC6C,EAAE,CAAC,CAAC,CAAC,GAAGrD,QAAQ,CAACmB,KAAK,CAACX,UAAU,CAAC6C,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;YAC7DlC,KAAK,CAACX,UAAU,CAAC6C,EAAE,CAAC,CAAC,CAAC,GAAGrD,QAAQ,CAACmB,KAAK,CAACX,UAAU,CAAC6C,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;YAC7DlC,KAAK,CAACX,UAAU,CAAC6C,EAAE,CAAC,CAAC,CAAC,GAAGrD,QAAQ,CAACmB,KAAK,CAACX,UAAU,CAAC6C,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;YAC7DlC,KAAK,CAACX,UAAU,CAAC6C,EAAE,CAAC,CAAC,CAAC,GAAGrD,QAAQ,CAACmB,KAAK,CAACX,UAAU,CAAC6C,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;YAC7DlC,KAAK,CAACX,UAAU,CAAC6C,EAAE,GAAG,IAAIE,WAAW,CAACpC,KAAK,CAACX,UAAU,CAAC6C,EAAE,CAAC;UAC5D;QACF;QAEA,IAAI,CAAChE,OAAO,CAAC,MAAM,EAAE8B,KAAK,CAAC;QAC3B;MACF;MAEAvB,KAAK,GAAG,qBAAqB,CAACC,IAAI,CAACiC,OAAO,CAAC;MAE3C,IAAIlC,KAAK,EAAE;QACTuB,KAAK,GAAG;UACNE,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC;QAED,IAAIrC,KAAK,CAAC,CAAC,CAAC,EAAE;UACZuB,KAAK,CAACX,UAAU,GAAGD,eAAe,CAACX,KAAK,CAAC,CAAC,CAAC,CAAC;UAC5CuB,KAAK,CAACX,UAAU,CAAC,aAAa,CAAC,GAAG2B,UAAU,CAAChB,KAAK,CAACX,UAAU,CAAC,aAAa,CAAC,CAAC;UAC7EW,KAAK,CAACX,UAAU,CAACgD,OAAO,GAAG,KAAK,CAACf,IAAI,CAACtB,KAAK,CAACX,UAAU,CAACgD,OAAO,CAAC;QACjE;QAEA,IAAI,CAACnE,OAAO,CAAC,MAAM,EAAE8B,KAAK,CAAC;QAC3B;MACF;MAEAvB,KAAK,GAAG,6BAA6B,CAACC,IAAI,CAACiC,OAAO,CAAC;MAEnD,IAAIlC,KAAK,EAAE;QACTuB,KAAK,GAAG;UACNE,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC;QAED,IAAIrC,KAAK,CAAC,CAAC,CAAC,EAAE;UACZuB,KAAK,CAACjC,IAAI,GAAGU,KAAK,CAAC,CAAC,CAAC;QACvB,CAAC,MAAM;UACLuB,KAAK,CAACjC,IAAI,GAAG,EAAE;QACjB;QAEA,IAAI,CAACG,OAAO,CAAC,MAAM,EAAE8B,KAAK,CAAC;QAC3B;MACF;MAEAvB,KAAK,GAAG,wBAAwB,CAACC,IAAI,CAACiC,OAAO,CAAC;MAE9C,IAAIlC,KAAK,EAAE;QACTuB,KAAK,GAAG;UACNE,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC;QAED,IAAIrC,KAAK,CAAC,CAAC,CAAC,EAAE;UACZuB,KAAK,CAACjC,IAAI,GAAGU,KAAK,CAAC,CAAC,CAAC;QACvB,CAAC,MAAM;UACLuB,KAAK,CAACjC,IAAI,GAAG,EAAE;QACjB;QAEA,IAAI,CAACG,OAAO,CAAC,MAAM,EAAE8B,KAAK,CAAC;QAC3B;MACF;MAEAvB,KAAK,GAAG,uBAAuB,CAACC,IAAI,CAACiC,OAAO,CAAC;MAE7C,IAAIlC,KAAK,EAAE;QACTuB,KAAK,GAAG;UACNE,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC;QAED,IAAIrC,KAAK,CAAC,CAAC,CAAC,EAAE;UACZuB,KAAK,CAACjC,IAAI,GAAGU,KAAK,CAAC,CAAC,CAAC;QACvB,CAAC,MAAM;UACLuB,KAAK,CAACjC,IAAI,GAAG,EAAE;QACjB;QAEA,IAAI,CAACG,OAAO,CAAC,MAAM,EAAE8B,KAAK,CAAC;QAC3B;MACF;MAEAvB,KAAK,GAAG,oBAAoB,CAACC,IAAI,CAACiC,OAAO,CAAC;MAE1C,IAAIlC,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;QACrBuB,KAAK,GAAG;UACNE,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC;QACDd,KAAK,CAACX,UAAU,GAAGD,eAAe,CAACX,KAAK,CAAC,CAAC,CAAC,CAAC;QAE5C,IAAIuB,KAAK,CAACX,UAAU,CAACiD,cAAc,CAAC,kBAAkB,CAAC,EAAE;UACvDtC,KAAK,CAACX,UAAU,CAAC,kBAAkB,CAAC,GAAGR,QAAQ,CAACmB,KAAK,CAACX,UAAU,CAAC,kBAAkB,CAAC,EAAE,EAAE,CAAC;QAC3F;QAEA,IAAIW,KAAK,CAACX,UAAU,CAACiD,cAAc,CAAC,6BAA6B,CAAC,EAAE;UAClEtC,KAAK,CAACX,UAAU,CAAC,6BAA6B,CAAC,GAAGW,KAAK,CAACX,UAAU,CAAC,6BAA6B,CAAC,CAACE,KAAK,CAACnB,GAAG,CAAC;QAC9G;QAEA,IAAI,CAACF,OAAO,CAAC,MAAM,EAAE8B,KAAK,CAAC;QAC3B;MACF;MAEAvB,KAAK,GAAG,oBAAoB,CAACC,IAAI,CAACiC,OAAO,CAAC;MAE1C,IAAIlC,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;QACrBuB,KAAK,GAAG;UACNE,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC;QACDd,KAAK,CAACX,UAAU,GAAGD,eAAe,CAACX,KAAK,CAAC,CAAC,CAAC,CAAC;QAC5C,CAAC,UAAU,CAAC,CAACiC,OAAO,CAAC,UAAU1B,GAAG,EAAE;UAClC,IAAIgB,KAAK,CAACX,UAAU,CAACiD,cAAc,CAACtD,GAAG,CAAC,EAAE;YACxCgB,KAAK,CAACX,UAAU,CAACL,GAAG,CAAC,GAAGgC,UAAU,CAAChB,KAAK,CAACX,UAAU,CAACL,GAAG,CAAC,CAAC;UAC3D;QACF,CAAC,CAAC;QACF,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC0B,OAAO,CAAC,UAAU1B,GAAG,EAAE;UAC5C,IAAIgB,KAAK,CAACX,UAAU,CAACiD,cAAc,CAACtD,GAAG,CAAC,EAAE;YACxCgB,KAAK,CAACX,UAAU,CAACL,GAAG,CAAC,GAAG,KAAK,CAACsC,IAAI,CAACtB,KAAK,CAACX,UAAU,CAACL,GAAG,CAAC,CAAC;UAC3D;QACF,CAAC,CAAC;QAEF,IAAIgB,KAAK,CAACX,UAAU,CAACiD,cAAc,CAAC,WAAW,CAAC,EAAE;UAChDtC,KAAK,CAACX,UAAU,CAACoC,SAAS,GAAGlD,cAAc,CAACyB,KAAK,CAACX,UAAU,CAACmC,SAAS,CAAC;QACzE;QAEA,IAAI,CAACtD,OAAO,CAAC,MAAM,EAAE8B,KAAK,CAAC;QAC3B;MACF;MAEAvB,KAAK,GAAG,8BAA8B,CAACC,IAAI,CAACiC,OAAO,CAAC;MAEpD,IAAIlC,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;QACrBuB,KAAK,GAAG;UACNE,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC;QACDd,KAAK,CAACX,UAAU,GAAGD,eAAe,CAACX,KAAK,CAAC,CAAC,CAAC,CAAC;QAC5C,CAAC,gBAAgB,EAAE,gBAAgB,EAAE,WAAW,CAAC,CAACiC,OAAO,CAAC,UAAU1B,GAAG,EAAE;UACvE,IAAIgB,KAAK,CAACX,UAAU,CAACiD,cAAc,CAACtD,GAAG,CAAC,EAAE;YACxCgB,KAAK,CAACX,UAAU,CAACL,GAAG,CAAC,GAAGgC,UAAU,CAAChB,KAAK,CAACX,UAAU,CAACL,GAAG,CAAC,CAAC;UAC3D;QACF,CAAC,CAAC;QACF,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,CAAC0B,OAAO,CAAC,UAAU1B,GAAG,EAAE;UACjE,IAAIgB,KAAK,CAACX,UAAU,CAACiD,cAAc,CAACtD,GAAG,CAAC,EAAE;YACxCgB,KAAK,CAACX,UAAU,CAACL,GAAG,CAAC,GAAG,KAAK,CAACsC,IAAI,CAACtB,KAAK,CAACX,UAAU,CAACL,GAAG,CAAC,CAAC;UAC3D;QACF,CAAC,CAAC;QACF,IAAI,CAACd,OAAO,CAAC,MAAM,EAAE8B,KAAK,CAAC;QAC3B;MACF;MAEAvB,KAAK,GAAG,wBAAwB,CAACC,IAAI,CAACiC,OAAO,CAAC;MAE9C,IAAIlC,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;QACrBuB,KAAK,GAAG;UACNE,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC;QACDd,KAAK,CAACX,UAAU,GAAGD,eAAe,CAACX,KAAK,CAAC,CAAC,CAAC,CAAC;QAC5C,CAAC,aAAa,CAAC,CAACiC,OAAO,CAAC,UAAU1B,GAAG,EAAE;UACrC,IAAIgB,KAAK,CAACX,UAAU,CAACiD,cAAc,CAACtD,GAAG,CAAC,EAAE;YACxCgB,KAAK,CAACX,UAAU,CAACL,GAAG,CAAC,GAAGgC,UAAU,CAAChB,KAAK,CAACX,UAAU,CAACL,GAAG,CAAC,CAAC;UAC3D;QACF,CAAC,CAAC;QACF,IAAI,CAACd,OAAO,CAAC,MAAM,EAAE8B,KAAK,CAAC;QAC3B;MACF;MAEAvB,KAAK,GAAG,4BAA4B,CAACC,IAAI,CAACiC,OAAO,CAAC;MAElD,IAAIlC,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;QACrBuB,KAAK,GAAG;UACNE,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC;QACDd,KAAK,CAACX,UAAU,GAAGD,eAAe,CAACX,KAAK,CAAC,CAAC,CAAC,CAAC;QAC5C,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,CAACiC,OAAO,CAAC,UAAU1B,GAAG,EAAE;UAC7D,IAAIgB,KAAK,CAACX,UAAU,CAACiD,cAAc,CAACtD,GAAG,CAAC,EAAE;YACxCgB,KAAK,CAACX,UAAU,CAACL,GAAG,CAAC,GAAGH,QAAQ,CAACmB,KAAK,CAACX,UAAU,CAACL,GAAG,CAAC,EAAE,EAAE,CAAC;YAC3D,MAAMuD,MAAM,GAAGvD,GAAG,KAAK,kBAAkB,GAAG,QAAQ,GAAG,QAAQ;YAC/DgB,KAAK,CAACX,UAAU,CAACoC,SAAS,GAAGzB,KAAK,CAACX,UAAU,CAACoC,SAAS,IAAI,CAAC,CAAC;YAC7DzB,KAAK,CAACX,UAAU,CAACoC,SAAS,CAACc,MAAM,CAAC,GAAGvC,KAAK,CAACX,UAAU,CAACL,GAAG,CAAC,CAAC,CAAC;;YAE5D,OAAOgB,KAAK,CAACX,UAAU,CAACL,GAAG,CAAC;UAC9B;QACF,CAAC,CAAC;QACF,IAAI,CAACd,OAAO,CAAC,MAAM,EAAE8B,KAAK,CAAC;QAC3B;MACF;MAEAvB,KAAK,GAAG,gCAAgC,CAACC,IAAI,CAACiC,OAAO,CAAC;MAEtD,IAAIlC,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;QACrBuB,KAAK,GAAG;UACNE,IAAI,EAAE,KAAK;UACXY,OAAO,EAAE;QACX,CAAC;QACDd,KAAK,CAACX,UAAU,GAAGD,eAAe,CAACX,KAAK,CAAC,CAAC,CAAC,CAAC;QAC5C,CAAC,UAAU,EAAE,WAAW,CAAC,CAACiC,OAAO,CAAC,UAAU1B,GAAG,EAAE;UAC/C,IAAIgB,KAAK,CAACX,UAAU,CAACiD,cAAc,CAACtD,GAAG,CAAC,EAAE;YACxCgB,KAAK,CAACX,UAAU,CAACL,GAAG,CAAC,GAAGH,QAAQ,CAACmB,KAAK,CAACX,UAAU,CAACL,GAAG,CAAC,EAAE,EAAE,CAAC;UAC7D;QACF,CAAC,CAAC;QACF,IAAI,CAACd,OAAO,CAAC,MAAM,EAAE8B,KAAK,CAAC;QAC3B;MACF,CAAC,CAAC;;MAGF,IAAI,CAAC9B,OAAO,CAAC,MAAM,EAAE;QACnBgC,IAAI,EAAE,KAAK;QACXnC,IAAI,EAAE4C,OAAO,CAACjB,KAAK,CAAC,CAAC;MACvB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE8C,SAAS,CAAC;IACRC,UAAU;IACVC,UAAU;IACVC,UAAU;IACVC;EACF,CAAC,EAAE;IACD,IAAI,OAAOD,UAAU,KAAK,UAAU,EAAE;MACpCA,UAAU,GAAG5C,IAAI,IAAIA,IAAI;IAC3B;IAEA,IAAI,CAACF,aAAa,CAAC/B,IAAI,CAACiC,IAAI,IAAI;MAC9B,MAAMtB,KAAK,GAAGgE,UAAU,CAAC/D,IAAI,CAACqB,IAAI,CAAC;MAEnC,IAAItB,KAAK,EAAE;QACT,IAAI,CAACP,OAAO,CAAC,MAAM,EAAE;UACnBgC,IAAI,EAAE,QAAQ;UACdnC,IAAI,EAAE4E,UAAU,CAAC5C,IAAI,CAAC;UACtB2C,UAAU;UACVE;QACF,CAAC,CAAC;QACF,OAAO,IAAI;MACb;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;AACA;AACA;;EAGEC,YAAY,CAAC;IACXJ,UAAU;IACVK;EACF,CAAC,EAAE;IACD,MAAMC,KAAK,GAAGhD,IAAI,IAAI;MACpB,IAAI0C,UAAU,CAACnB,IAAI,CAACvB,IAAI,CAAC,EAAE;QACzB,OAAO+C,GAAG,CAAC/C,IAAI,CAAC;MAClB;MAEA,OAAOA,IAAI;IACb,CAAC;IAED,IAAI,CAACD,UAAU,CAAChC,IAAI,CAACiF,KAAK,CAAC;EAC7B;AAEF;AAEA,MAAMC,SAAS,GAAGC,GAAG,IAAIA,GAAG,CAACd,WAAW,EAAE,CAACxC,OAAO,CAAC,QAAQ,EAAEuD,CAAC,IAAIA,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,CAAC;AAErF,MAAMC,aAAa,GAAG,UAAU/D,UAAU,EAAE;EAC1C,MAAMV,MAAM,GAAG,CAAC,CAAC;EACjB0E,MAAM,CAACC,IAAI,CAACjE,UAAU,CAAC,CAACqB,OAAO,CAAC,UAAU1B,GAAG,EAAE;IAC7CL,MAAM,CAACqE,SAAS,CAAChE,GAAG,CAAC,CAAC,GAAGK,UAAU,CAACL,GAAG,CAAC;EAC1C,CAAC,CAAC;EACF,OAAOL,MAAM;AACf,CAAC,CAAC,CAAC;AACH;AACA;AACA;;AAGA,MAAM4E,WAAW,GAAG,UAAUC,QAAQ,EAAE;EACtC,MAAM;IACJC,aAAa;IACbC,cAAc;IACdC;EACF,CAAC,GAAGH,QAAQ;EAEZ,IAAI,CAACC,aAAa,EAAE;IAClB;EACF;EAEA,MAAMG,GAAG,GAAG,uBAAuB;EACnC,MAAMC,EAAE,GAAG,UAAU;EACrB,MAAMC,GAAG,GAAG,cAAc;EAC1B,MAAMC,iBAAiB,GAAGL,cAAc,IAAIA,cAAc,GAAG,CAAC;EAC9D,MAAMM,eAAe,GAAGL,kBAAkB,IAAIA,kBAAkB,GAAG,CAAC;EAEpE,IAAID,cAAc,IAAI,CAACD,aAAa,CAACnB,cAAc,CAACuB,EAAE,CAAC,EAAE;IACvDJ,aAAa,CAACI,EAAE,CAAC,GAAGE,iBAAiB;IACrC,IAAI,CAAC7F,OAAO,CAAC,MAAM,EAAE;MACnB+F,OAAO,EAAG,GAAEL,GAAI,gDAA+CG,iBAAkB;IACnF,CAAC,CAAC;EACJ;EAEA,IAAIA,iBAAiB,IAAIN,aAAa,CAACI,EAAE,CAAC,GAAGE,iBAAiB,EAAE;IAC9D,IAAI,CAAC7F,OAAO,CAAC,MAAM,EAAE;MACnB+F,OAAO,EAAG,GAAEL,GAAI,wBAAuBH,aAAa,CAACI,EAAE,CAAE,4BAA2BE,iBAAkB;IACxG,CAAC,CAAC;IACFN,aAAa,CAACI,EAAE,CAAC,GAAGE,iBAAiB;EACvC,CAAC,CAAC;;EAGF,IAAIJ,kBAAkB,IAAI,CAACF,aAAa,CAACnB,cAAc,CAACwB,GAAG,CAAC,EAAE;IAC5DL,aAAa,CAACK,GAAG,CAAC,GAAGH,kBAAkB,GAAG,CAAC;IAC3C,IAAI,CAACzF,OAAO,CAAC,MAAM,EAAE;MACnB+F,OAAO,EAAG,GAAEL,GAAI,yDAAwDH,aAAa,CAACK,GAAG,CAAE;IAC7F,CAAC,CAAC;EACJ,CAAC,CAAC;;EAGF,IAAIH,kBAAkB,IAAIF,aAAa,CAACK,GAAG,CAAC,GAAGE,eAAe,EAAE;IAC9D,IAAI,CAAC9F,OAAO,CAAC,MAAM,EAAE;MACnB+F,OAAO,EAAG,GAAEL,GAAI,6BAA4BH,aAAa,CAACK,GAAG,CAAE,gCAA+BE,eAAgB;IAChH,CAAC,CAAC;IACFP,aAAa,CAACK,GAAG,CAAC,GAAGE,eAAe;EACtC;AACF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAME,MAAM,SAAS1G,MAAM,CAAC;EAC1BI,WAAW,GAAG;IACZ,KAAK,EAAE;IACP,IAAI,CAACuG,UAAU,GAAG,IAAIxG,UAAU,EAAE;IAClC,IAAI,CAACyG,WAAW,GAAG,IAAIxE,WAAW,EAAE;IACpC,IAAI,CAACuE,UAAU,CAACE,IAAI,CAAC,IAAI,CAACD,WAAW,CAAC;IACtC;;IAEA,MAAME,IAAI,GAAG,IAAI;IACjB;;IAEA,MAAMC,IAAI,GAAG,EAAE;IACf,IAAIC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;;IAErB,IAAIC,UAAU,CAAC,CAAC;;IAEhB,IAAIzF,GAAG;IACP,IAAI0F,QAAQ,GAAG,KAAK;IAEpB,MAAMC,IAAI,GAAG,YAAY,CAAC,CAAC;IAE3B,MAAMC,kBAAkB,GAAG;MACzB,OAAO,EAAE,CAAC,CAAC;MACX,OAAO,EAAE,CAAC,CAAC;MACX,iBAAiB,EAAE,CAAC,CAAC;MACrB,WAAW,EAAE,CAAC;IAChB,CAAC,CAAC,CAAC;IACH;;IAEA,MAAMC,YAAY,GAAG,+CAA+C,CAAC,CAAC;;IAEtE,IAAIC,eAAe,GAAG,CAAC,CAAC,CAAC;;IAEzB,IAAI,CAACtB,QAAQ,GAAG;MACduB,UAAU,EAAE,IAAI;MAChBC,mBAAmB,EAAE,EAAE;MACvBC,QAAQ,EAAE;IACZ,CAAC,CAAC,CAAC;IACH;IACA;;IAEA,IAAIC,gBAAgB,GAAG,CAAC,CAAC,CAAC;;IAE1B,IAAIC,oBAAoB,GAAG,CAAC;IAC5B,IAAI,CAACC,EAAE,CAAC,KAAK,EAAE,MAAM;MACnB;MACA;MACA,IAAIZ,UAAU,CAACrE,GAAG,IAAI,CAACqE,UAAU,CAACa,KAAK,IAAI,CAACb,UAAU,CAACc,YAAY,EAAE;QACnE;MACF;MAEA,IAAI,CAACd,UAAU,CAAC1B,GAAG,IAAI2B,UAAU,EAAE;QACjCD,UAAU,CAAC1B,GAAG,GAAG2B,UAAU;MAC7B;MAEA,IAAI,CAACD,UAAU,CAACxF,GAAG,IAAIA,GAAG,EAAE;QAC1BwF,UAAU,CAACxF,GAAG,GAAGA,GAAG;MACtB;MAEA,IAAI,CAACwF,UAAU,CAACe,QAAQ,IAAI,OAAOT,eAAe,KAAK,QAAQ,EAAE;QAC/DN,UAAU,CAACe,QAAQ,GAAGT,eAAe;MACvC;MAEA,IAAI,CAACtB,QAAQ,CAACgC,cAAc,GAAGhB,UAAU;IAC3C,CAAC,CAAC,CAAC,CAAC;;IAEJ,IAAI,CAACJ,WAAW,CAACgB,EAAE,CAAC,MAAM,EAAE,UAAUK,KAAK,EAAE;MAC3C,IAAIC,UAAU;MACd,IAAIC,SAAS;MACb,CAAC;QACC/B,GAAG,GAAG;UACJ;UACA,CAAC,CAAC;YACA1C,OAAO,GAAG;cACR,IAAIuE,KAAK,CAACvE,OAAO,EAAE;gBACjB,IAAI,CAACsC,QAAQ,CAACtC,OAAO,GAAGuE,KAAK,CAACvE,OAAO;cACvC;YACF,CAAC;YAED,aAAa,GAAG;cACd,IAAI,CAACsC,QAAQ,CAACuB,UAAU,GAAGU,KAAK,CAACpE,OAAO;cAExC,IAAI,EAAE,SAAS,IAAIoE,KAAK,CAAC,EAAE;gBACzB,IAAI,CAACvH,OAAO,CAAC,MAAM,EAAE;kBACnB+F,OAAO,EAAE;gBACX,CAAC,CAAC;gBACF,IAAI,CAACT,QAAQ,CAACuB,UAAU,GAAG,IAAI;cACjC;YACF,CAAC;YAEDtD,SAAS,GAAG;cACV,MAAMA,SAAS,GAAG,CAAC,CAAC;cAEpB,IAAI,QAAQ,IAAIgE,KAAK,EAAE;gBACrBjB,UAAU,CAAC/C,SAAS,GAAGA,SAAS;gBAChCA,SAAS,CAAC7C,MAAM,GAAG6G,KAAK,CAAC7G,MAAM;gBAE/B,IAAI,EAAE,QAAQ,IAAI6G,KAAK,CAAC,EAAE;kBACxB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;kBACkBA,KAAK,CAAC3G,MAAM,GAAGoG,gBAAgB;gBACjC;cACF;cAEA,IAAI,QAAQ,IAAIO,KAAK,EAAE;gBACrBjB,UAAU,CAAC/C,SAAS,GAAGA,SAAS;gBAChCA,SAAS,CAAC3C,MAAM,GAAG2G,KAAK,CAAC3G,MAAM;cACjC;cAEAoG,gBAAgB,GAAGzD,SAAS,CAAC3C,MAAM,GAAG2C,SAAS,CAAC7C,MAAM;YACxD,CAAC;YAEDgH,OAAO,GAAG;cACR,IAAI,CAACpC,QAAQ,CAACqC,OAAO,GAAG,IAAI;YAC9B,CAAC;YAEDC,GAAG,GAAG;cACJ,IAAI,EAAE,eAAe,IAAI,IAAI,CAACtC,QAAQ,CAAC,EAAE;gBACvC,IAAI,CAACA,QAAQ,CAACuC,aAAa,GAAG,CAAC;gBAC/B,IAAI,CAAC7H,OAAO,CAAC,MAAM,EAAE;kBACnB+F,OAAO,EAAE;gBACX,CAAC,CAAC;cACJ;cAEA,IAAI,EAAE,uBAAuB,IAAI,IAAI,CAACT,QAAQ,CAAC,EAAE;gBAC/C,IAAI,CAACA,QAAQ,CAACwC,qBAAqB,GAAG,CAAC;gBACvC,IAAI,CAAC9H,OAAO,CAAC,MAAM,EAAE;kBACnB+F,OAAO,EAAE;gBACX,CAAC,CAAC;cACJ;cAEA,IAAIwB,KAAK,CAAC1E,QAAQ,GAAG,CAAC,EAAE;gBACtByD,UAAU,CAACzD,QAAQ,GAAG0E,KAAK,CAAC1E,QAAQ;cACtC;cAEA,IAAI0E,KAAK,CAAC1E,QAAQ,KAAK,CAAC,EAAE;gBACxByD,UAAU,CAACzD,QAAQ,GAAG,IAAI;gBAC1B,IAAI,CAAC7C,OAAO,CAAC,MAAM,EAAE;kBACnB+F,OAAO,EAAE;gBACX,CAAC,CAAC;cACJ;cAEA,IAAI,CAACT,QAAQ,CAACyB,QAAQ,GAAGV,IAAI;YAC/B,CAAC;YAEDvF,GAAG,GAAG;cACJ,IAAI,CAACyG,KAAK,CAACpG,UAAU,EAAE;gBACrB,IAAI,CAACnB,OAAO,CAAC,MAAM,EAAE;kBACnB+F,OAAO,EAAE;gBACX,CAAC,CAAC;gBACF;cACF,CAAC,CAAC;;cAGF,IAAIwB,KAAK,CAACpG,UAAU,CAAC4G,MAAM,KAAK,MAAM,EAAE;gBACtCjH,GAAG,GAAG,IAAI;gBACV;cACF;cAEA,IAAI,CAACyG,KAAK,CAACpG,UAAU,CAACkC,GAAG,EAAE;gBACzB,IAAI,CAACrD,OAAO,CAAC,MAAM,EAAE;kBACnB+F,OAAO,EAAE;gBACX,CAAC,CAAC;gBACF;cACF;cAEA,IAAIwB,KAAK,CAACpG,UAAU,CAAC6G,SAAS,KAAK,gCAAgC,EAAE;gBACnE,IAAI,CAAC1C,QAAQ,CAAC2C,iBAAiB,GAAG,IAAI,CAAC3C,QAAQ,CAAC2C,iBAAiB,IAAI,CAAC,CAAC,CAAC,CAAC;;gBAEzE,IAAI,CAAC3C,QAAQ,CAAC2C,iBAAiB,CAAC,mBAAmB,CAAC,GAAG;kBACrD9G,UAAU,EAAEoG,KAAK,CAACpG;gBACpB,CAAC;gBACD;cACF;cAEA,IAAIoG,KAAK,CAACpG,UAAU,CAAC6G,SAAS,KAAK,yBAAyB,EAAE;gBAC5D,IAAI,CAAC1C,QAAQ,CAAC2C,iBAAiB,GAAG,IAAI,CAAC3C,QAAQ,CAAC2C,iBAAiB,IAAI,CAAC,CAAC,CAAC,CAAC;;gBAEzE,IAAI,CAAC3C,QAAQ,CAAC2C,iBAAiB,CAAC,yBAAyB,CAAC,GAAG;kBAC3DhG,GAAG,EAAEsF,KAAK,CAACpG,UAAU,CAACkC;gBACxB,CAAC;gBACD;cACF,CAAC,CAAC;cACF;;cAGA,IAAIkE,KAAK,CAACpG,UAAU,CAAC6G,SAAS,KAAKrB,YAAY,EAAE;gBAC/C,MAAMuB,aAAa,GAAG,CAAC,YAAY,EAAE,gBAAgB,EAAE,iBAAiB,CAAC;gBAEzE,IAAIA,aAAa,CAACnI,OAAO,CAACwH,KAAK,CAACpG,UAAU,CAAC4G,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;kBACzD,IAAI,CAAC/H,OAAO,CAAC,MAAM,EAAE;oBACnB+F,OAAO,EAAE;kBACX,CAAC,CAAC;kBACF;gBACF;gBAEA,IAAIwB,KAAK,CAACpG,UAAU,CAAC4G,MAAM,KAAK,iBAAiB,EAAE;kBACjD,IAAI,CAAC/H,OAAO,CAAC,MAAM,EAAE;oBACnB+F,OAAO,EAAE;kBACX,CAAC,CAAC;gBACJ;gBAEA,IAAIwB,KAAK,CAACpG,UAAU,CAACkC,GAAG,CAACpD,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,yBAAyB,EAAE;kBACvE,IAAI,CAACD,OAAO,CAAC,MAAM,EAAE;oBACnB+F,OAAO,EAAE;kBACX,CAAC,CAAC;kBACF;gBACF;gBAEA,IAAI,EAAEwB,KAAK,CAACpG,UAAU,CAACgH,KAAK,IAAIZ,KAAK,CAACpG,UAAU,CAACgH,KAAK,CAAClI,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,EAAE;kBAChF,IAAI,CAACD,OAAO,CAAC,MAAM,EAAE;oBACnB+F,OAAO,EAAE;kBACX,CAAC,CAAC;kBACF;gBACF,CAAC,CAAC;gBACF;;gBAGA,IAAI,CAACT,QAAQ,CAAC2C,iBAAiB,GAAG,IAAI,CAAC3C,QAAQ,CAAC2C,iBAAiB,IAAI,CAAC,CAAC;gBACvE,IAAI,CAAC3C,QAAQ,CAAC2C,iBAAiB,CAAC,oBAAoB,CAAC,GAAG;kBACtD9G,UAAU,EAAE;oBACViH,WAAW,EAAEb,KAAK,CAACpG,UAAU,CAAC6G,SAAS;oBACvC;oBACAK,KAAK,EAAEd,KAAK,CAACpG,UAAU,CAACgH,KAAK,CAAClI,SAAS,CAAC,CAAC;kBAC3C,CAAC;kBACD;kBACAqI,IAAI,EAAE9I,qBAAqB,CAAC+H,KAAK,CAACpG,UAAU,CAACkC,GAAG,CAAChC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAChE,CAAC;gBACD;cACF;cAEA,IAAI,CAACkG,KAAK,CAACpG,UAAU,CAAC4G,MAAM,EAAE;gBAC5B,IAAI,CAAC/H,OAAO,CAAC,MAAM,EAAE;kBACnB+F,OAAO,EAAE;gBACX,CAAC,CAAC;cACJ,CAAC,CAAC;;cAGFjF,GAAG,GAAG;gBACJyH,MAAM,EAAEhB,KAAK,CAACpG,UAAU,CAAC4G,MAAM,IAAI,SAAS;gBAC5C9F,GAAG,EAAEsF,KAAK,CAACpG,UAAU,CAACkC;cACxB,CAAC;cAED,IAAI,OAAOkE,KAAK,CAACpG,UAAU,CAAC6C,EAAE,KAAK,WAAW,EAAE;gBAC9ClD,GAAG,CAAC0H,EAAE,GAAGjB,KAAK,CAACpG,UAAU,CAAC6C,EAAE;cAC9B;YACF,CAAC;YAED,gBAAgB,GAAG;cACjB,IAAI,CAACyE,QAAQ,CAAClB,KAAK,CAACtE,MAAM,CAAC,EAAE;gBAC3B,IAAI,CAACjD,OAAO,CAAC,MAAM,EAAE;kBACnB+F,OAAO,EAAE,mCAAmC,GAAGwB,KAAK,CAACtE;gBACvD,CAAC,CAAC;gBACF;cACF;cAEA,IAAI,CAACqC,QAAQ,CAACuC,aAAa,GAAGN,KAAK,CAACtE,MAAM;YAC5C,CAAC;YAED,wBAAwB,GAAG;cACzB,IAAI,CAACwF,QAAQ,CAAClB,KAAK,CAACtE,MAAM,CAAC,EAAE;gBAC3B,IAAI,CAACjD,OAAO,CAAC,MAAM,EAAE;kBACnB+F,OAAO,EAAE,2CAA2C,GAAGwB,KAAK,CAACtE;gBAC/D,CAAC,CAAC;gBACF;cACF;cAEA,IAAI,CAACqC,QAAQ,CAACwC,qBAAqB,GAAGP,KAAK,CAACtE,MAAM;cAClD2D,eAAe,GAAGW,KAAK,CAACtE,MAAM;YAChC,CAAC;YAED,eAAe,GAAG;cAChB,IAAI,CAAC,WAAW,CAACG,IAAI,CAACmE,KAAK,CAACrE,YAAY,CAAC,EAAE;gBACzC,IAAI,CAAClD,OAAO,CAAC,MAAM,EAAE;kBACnB+F,OAAO,EAAE,kCAAkC,GAAGwB,KAAK,CAACmB;gBACtD,CAAC,CAAC;gBACF;cACF;cAEA,IAAI,CAACpD,QAAQ,CAACpC,YAAY,GAAGqE,KAAK,CAACrE,YAAY;YACjD,CAAC;YAED0B,GAAG,GAAG;cACJ2B,UAAU,GAAG,CAAC,CAAC;cAEf,IAAIgB,KAAK,CAACtF,GAAG,EAAE;gBACbsE,UAAU,CAACtE,GAAG,GAAGsF,KAAK,CAACtF,GAAG;cAC5B;cAEA,IAAIsF,KAAK,CAAChE,SAAS,EAAE;gBACnBgD,UAAU,CAAChD,SAAS,GAAGgE,KAAK,CAAChE,SAAS;cACxC;cAEA,IAAIzC,GAAG,EAAE;gBACPyF,UAAU,CAACzF,GAAG,GAAGA,GAAG;cACtB;YACF,CAAC;YAED,YAAY,GAAG;cACb,IAAI,CAACwE,QAAQ,CAACqD,SAAS,GAAGtC,IAAI;cAC9B,IAAI,CAACf,QAAQ,CAACsD,WAAW,GAAG,IAAI,CAACtD,QAAQ,CAACsD,WAAW,IAAIlC,kBAAkB;cAE3E,IAAI,CAACa,KAAK,CAACpG,UAAU,EAAE;gBACrB,IAAI,CAACnB,OAAO,CAAC,MAAM,EAAE;kBACnB+F,OAAO,EAAE;gBACX,CAAC,CAAC;gBACF;cACF;cAEA,IAAI,CAACO,UAAU,CAACnF,UAAU,EAAE;gBAC1BmF,UAAU,CAACnF,UAAU,GAAG,CAAC,CAAC;cAC5B;cAEA5B,QAAQ,CAAC+G,UAAU,CAACnF,UAAU,EAAEoG,KAAK,CAACpG,UAAU,CAAC;YACnD,CAAC;YAED0H,KAAK,GAAG;cACN,IAAI,CAACvD,QAAQ,CAACsD,WAAW,GAAG,IAAI,CAACtD,QAAQ,CAACsD,WAAW,IAAIlC,kBAAkB;cAE3E,IAAI,EAAEa,KAAK,CAACpG,UAAU,IAAIoG,KAAK,CAACpG,UAAU,CAAC2H,IAAI,IAAIvB,KAAK,CAACpG,UAAU,CAAC,UAAU,CAAC,IAAIoG,KAAK,CAACpG,UAAU,CAAC4H,IAAI,CAAC,EAAE;gBACzG,IAAI,CAAC/I,OAAO,CAAC,MAAM,EAAE;kBACnB+F,OAAO,EAAE;gBACX,CAAC,CAAC;gBACF;cACF,CAAC,CAAC;;cAGF,MAAMiD,cAAc,GAAG,IAAI,CAAC1D,QAAQ,CAACsD,WAAW,CAACrB,KAAK,CAACpG,UAAU,CAAC2H,IAAI,CAAC;cACvEE,cAAc,CAACzB,KAAK,CAACpG,UAAU,CAAC,UAAU,CAAC,CAAC,GAAG6H,cAAc,CAACzB,KAAK,CAACpG,UAAU,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC;cACjGqG,UAAU,GAAGwB,cAAc,CAACzB,KAAK,CAACpG,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;;cAE3DsG,SAAS,GAAG;gBACVwB,OAAO,EAAE,MAAM,CAAC7F,IAAI,CAACmE,KAAK,CAACpG,UAAU,CAAC+H,OAAO;cAC/C,CAAC;cAED,IAAIzB,SAAS,CAACwB,OAAO,EAAE;gBACrBxB,SAAS,CAAC0B,UAAU,GAAG,IAAI;cAC7B,CAAC,MAAM;gBACL1B,SAAS,CAAC0B,UAAU,GAAG,MAAM,CAAC/F,IAAI,CAACmE,KAAK,CAACpG,UAAU,CAACiI,UAAU,CAAC;cACjE;cAEA,IAAI7B,KAAK,CAACpG,UAAU,CAACkI,QAAQ,EAAE;gBAC7B5B,SAAS,CAAC6B,QAAQ,GAAG/B,KAAK,CAACpG,UAAU,CAACkI,QAAQ;cAChD;cAEA,IAAI9B,KAAK,CAACpG,UAAU,CAACkC,GAAG,EAAE;gBACxBoE,SAAS,CAACxF,GAAG,GAAGsF,KAAK,CAACpG,UAAU,CAACkC,GAAG;cACtC;cAEA,IAAIkE,KAAK,CAACpG,UAAU,CAAC,aAAa,CAAC,EAAE;gBACnCsG,SAAS,CAAC8B,UAAU,GAAGhC,KAAK,CAACpG,UAAU,CAAC,aAAa,CAAC;cACxD;cAEA,IAAIoG,KAAK,CAACpG,UAAU,CAACqI,eAAe,EAAE;gBACpC/B,SAAS,CAACgC,eAAe,GAAGlC,KAAK,CAACpG,UAAU,CAACqI,eAAe;cAC9D;cAEA,IAAIjC,KAAK,CAACpG,UAAU,CAACuI,MAAM,EAAE;gBAC3BjC,SAAS,CAACkC,MAAM,GAAG,MAAM,CAACvG,IAAI,CAACmE,KAAK,CAACpG,UAAU,CAACuI,MAAM,CAAC;cACzD,CAAC,CAAC;;cAGFlC,UAAU,CAACD,KAAK,CAACpG,UAAU,CAAC4H,IAAI,CAAC,GAAGtB,SAAS;YAC/C,CAAC;YAEDmC,aAAa,GAAG;cACdhD,eAAe,IAAI,CAAC;cACpBN,UAAU,CAACsD,aAAa,GAAG,IAAI;cAC/B,IAAI,CAACtE,QAAQ,CAACwB,mBAAmB,CAAClH,IAAI,CAACyG,IAAI,CAAC3F,MAAM,CAAC;YACrD,CAAC;YAED,mBAAmB,GAAG;cACpB,IAAI,OAAO,IAAI,CAAC4E,QAAQ,CAACzB,cAAc,KAAK,WAAW,EAAE;gBACvD;gBACA;gBACA;gBACA;gBACA,IAAI,CAACyB,QAAQ,CAACzB,cAAc,GAAG0D,KAAK,CAAC1D,cAAc;gBACnD,IAAI,CAACyB,QAAQ,CAACxB,cAAc,GAAGyD,KAAK,CAACzD,cAAc;cACrD;cAEAwC,UAAU,CAACzC,cAAc,GAAG0D,KAAK,CAAC1D,cAAc;cAChDyC,UAAU,CAACxC,cAAc,GAAGyD,KAAK,CAACzD,cAAc;YAClD,CAAC;YAED+F,cAAc,GAAG;cACf,IAAI,CAACpB,QAAQ,CAAClB,KAAK,CAAC1E,QAAQ,CAAC,IAAI0E,KAAK,CAAC1E,QAAQ,GAAG,CAAC,EAAE;gBACnD,IAAI,CAAC7C,OAAO,CAAC,MAAM,EAAE;kBACnB+F,OAAO,EAAE,oCAAoC,GAAGwB,KAAK,CAAC1E;gBACxD,CAAC,CAAC;gBACF;cACF;cAEA,IAAI,CAACyC,QAAQ,CAACE,cAAc,GAAG+B,KAAK,CAAC1E,QAAQ;cAC7CwC,WAAW,CAAC3C,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC4C,QAAQ,CAAC;YACvC,CAAC;YAEDwE,KAAK,GAAG;cACN,IAAI,CAACvC,KAAK,CAACpG,UAAU,IAAI4I,KAAK,CAACxC,KAAK,CAACpG,UAAU,CAAC,aAAa,CAAC,CAAC,EAAE;gBAC/D,IAAI,CAACnB,OAAO,CAAC,MAAM,EAAE;kBACnB+F,OAAO,EAAE;gBACX,CAAC,CAAC;gBACF;cACF;cAEA,IAAI,CAACT,QAAQ,CAACwE,KAAK,GAAG;gBACpBE,UAAU,EAAEzC,KAAK,CAACpG,UAAU,CAAC,aAAa,CAAC;gBAC3C8I,OAAO,EAAE1C,KAAK,CAACpG,UAAU,CAACgD;cAC5B,CAAC;YACH,CAAC;YAED,SAAS,GAAG;cACVmC,UAAU,CAAC4D,MAAM,GAAG3C,KAAK,CAAC1H,IAAI;YAChC,CAAC;YAED,cAAc,GAAG;cACfyG,UAAU,CAAC6D,UAAU,GAAG5C,KAAK,CAAC1H,IAAI;YACpC,CAAC;YAED,QAAQ,GAAG;cACTyG,UAAU,CAAC8D,KAAK,GAAG7C,KAAK,CAAC1H,IAAI;YAC/B,CAAC;YAED,MAAM,GAAG;cACP,IAAI,CAACyF,QAAQ,CAAC+E,IAAI,GAAGnF,aAAa,CAACqC,KAAK,CAACpG,UAAU,CAAC;cACpD,IAAI,CAACmJ,wBAAwB,CAAC,aAAa,EAAE/C,KAAK,CAACpG,UAAU,EAAE,CAAC,kBAAkB,CAAC,CAAC;YACtF,CAAC;YAED,MAAM,GAAG;cACPqF,QAAQ,GAAG,IAAI,CAAC,CAAC;;cAEjB,MAAM+D,YAAY,GAAG,IAAI,CAACjF,QAAQ,CAACyB,QAAQ,CAACrG,MAAM;cAClD,MAAM8J,IAAI,GAAGtF,aAAa,CAACqC,KAAK,CAACpG,UAAU,CAAC;cAC5CmF,UAAU,CAACa,KAAK,GAAGb,UAAU,CAACa,KAAK,IAAI,EAAE;cACzCb,UAAU,CAACa,KAAK,CAACvH,IAAI,CAAC4K,IAAI,CAAC;cAE3B,IAAIA,IAAI,CAACjH,SAAS,EAAE;gBAClB,IAAI,CAACiH,IAAI,CAACjH,SAAS,CAACa,cAAc,CAAC,QAAQ,CAAC,EAAE;kBAC5CoG,IAAI,CAACjH,SAAS,CAAC3C,MAAM,GAAGqG,oBAAoB;gBAC9C;gBAEAA,oBAAoB,GAAGuD,IAAI,CAACjH,SAAS,CAAC3C,MAAM,GAAG4J,IAAI,CAACjH,SAAS,CAAC7C,MAAM;cACtE;cAEA,MAAM+J,SAAS,GAAGnE,UAAU,CAACa,KAAK,CAACzG,MAAM,GAAG,CAAC;cAC7C,IAAI,CAAC4J,wBAAwB,CAAE,gBAAeG,SAAU,iBAAgBF,YAAa,EAAC,EAAEhD,KAAK,CAACpG,UAAU,EAAE,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;cAE9H,IAAI,IAAI,CAACmE,QAAQ,CAACoF,gBAAgB,EAAE;gBAClC,IAAI,CAACpF,QAAQ,CAACoF,gBAAgB,CAAClI,OAAO,CAAC,CAACmI,CAAC,EAAErJ,CAAC,KAAK;kBAC/C,IAAI,CAACqJ,CAAC,CAACvG,cAAc,CAAC,UAAU,CAAC,EAAE;oBACjC,IAAI,CAACpE,OAAO,CAAC,MAAM,EAAE;sBACnB+F,OAAO,EAAG,4BAA2BzE,CAAE;oBACzC,CAAC,CAAC;kBACJ;gBACF,CAAC,CAAC;cACJ;YACF,CAAC;YAED,gBAAgB,GAAG;cACjB,MAAMF,KAAK,GAAG,IAAI,CAACkE,QAAQ,CAACC,aAAa,GAAGL,aAAa,CAACqC,KAAK,CAACpG,UAAU,CAAC;cAE3E,IAAI,CAACC,KAAK,CAACgD,cAAc,CAAC,gBAAgB,CAAC,EAAE;gBAC3ChD,KAAK,CAACwJ,cAAc,GAAG,KAAK;gBAC5B,IAAI,CAAC5K,OAAO,CAAC,MAAM,EAAE;kBACnB+F,OAAO,EAAE;gBACX,CAAC,CAAC;cACJ;cAEAV,WAAW,CAAC3C,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC4C,QAAQ,CAAC;cAErC,IAAIlE,KAAK,CAACyJ,iBAAiB,IAAI,CAACzJ,KAAK,CAACgD,cAAc,CAAC,cAAc,CAAC,EAAE;gBACpE,IAAI,CAACpE,OAAO,CAAC,MAAM,EAAE;kBACnB+F,OAAO,EAAE;gBACX,CAAC,CAAC;cACJ;YACF,CAAC;YAED,cAAc,GAAG;cACf;cACA,MAAMwE,YAAY,GAAG,IAAI,CAACjF,QAAQ,CAACyB,QAAQ,CAACrG,MAAM;cAClD,MAAMoK,IAAI,GAAG5F,aAAa,CAACqC,KAAK,CAACpG,UAAU,CAAC;cAC5C,MAAM4J,MAAM,GAAGD,IAAI,CAAC9I,IAAI,IAAI8I,IAAI,CAAC9I,IAAI,KAAK,MAAM;cAChDsE,UAAU,CAACc,YAAY,GAAGd,UAAU,CAACc,YAAY,IAAI,EAAE;cACvDd,UAAU,CAACc,YAAY,CAACxH,IAAI,CAACkL,IAAI,CAAC;cAElC,IAAIA,IAAI,CAACvH,SAAS,EAAE;gBAClB,IAAI,CAACuH,IAAI,CAACvH,SAAS,CAACa,cAAc,CAAC,QAAQ,CAAC,EAAE;kBAC5C;kBACA0G,IAAI,CAACvH,SAAS,CAAC3C,MAAM,GAAGmK,MAAM,GAAG9D,oBAAoB,GAAG,CAAC;kBAEzD,IAAI8D,MAAM,EAAE;oBACV9D,oBAAoB,GAAG6D,IAAI,CAACvH,SAAS,CAAC3C,MAAM,GAAGkK,IAAI,CAACvH,SAAS,CAAC7C,MAAM;kBACtE;gBACF;cACF;cAEA,MAAMsK,KAAK,GAAG1E,UAAU,CAACc,YAAY,CAAC1G,MAAM,GAAG,CAAC;cAChD,IAAI,CAAC4J,wBAAwB,CAAE,wBAAuBU,KAAM,iBAAgBT,YAAa,EAAC,EAAEhD,KAAK,CAACpG,UAAU,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;cAE9H,IAAI,CAAC2J,IAAI,CAAC9I,IAAI,EAAE;gBACd;cACF,CAAC,CAAC;cACF;;cAGA,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgF,UAAU,CAACc,YAAY,CAAC1G,MAAM,GAAG,CAAC,EAAEY,CAAC,EAAE,EAAE;gBAC3D,MAAM2J,SAAS,GAAG3E,UAAU,CAACc,YAAY,CAAC9F,CAAC,CAAC;gBAE5C,IAAI,CAAC2J,SAAS,CAACjJ,IAAI,EAAE;kBACnB;gBACF;gBAEA,IAAIiJ,SAAS,CAACjJ,IAAI,KAAK8I,IAAI,CAAC9I,IAAI,EAAE;kBAChC,IAAI,CAAChC,OAAO,CAAC,MAAM,EAAE;oBACnB+F,OAAO,EAAG,wBAAuBiF,KAAM,iBAAgBT,YAAa,sBAAqBO,IAAI,CAAC9I,IAAK,qBAAoBV,CAAE;kBAC3H,CAAC,CAAC;gBACJ;cACF;YACF,CAAC;YAED,kBAAkB,GAAG;cACnB,MAAM4J,MAAM,GAAGhG,aAAa,CAACqC,KAAK,CAACpG,UAAU,CAAC;cAC9C,IAAI,CAACmE,QAAQ,CAACoF,gBAAgB,GAAG,IAAI,CAACpF,QAAQ,CAACoF,gBAAgB,IAAI,EAAE;cACrE,IAAI,CAACpF,QAAQ,CAACoF,gBAAgB,CAAC9K,IAAI,CAACsL,MAAM,CAAC;cAC3C,MAAMF,KAAK,GAAG,IAAI,CAAC1F,QAAQ,CAACoF,gBAAgB,CAAChK,MAAM,GAAG,CAAC;cACvD,MAAMyK,QAAQ,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC;cAEpC,IAAI3E,QAAQ,EAAE;gBACZ2E,QAAQ,CAACvL,IAAI,CAAC,WAAW,CAAC;cAC5B;cAEA,IAAI,CAAC0K,wBAAwB,CAAE,4BAA2BU,KAAM,EAAC,EAAEzD,KAAK,CAACpG,UAAU,EAAEgK,QAAQ,CAAC;YAChG,CAAC;YAED,UAAU,GAAG;cACX,IAAI,CAAC7F,QAAQ,CAAC8F,OAAO,GAAGlG,aAAa,CAACqC,KAAK,CAACpG,UAAU,CAAC;cACvD,IAAI,CAACmJ,wBAAwB,CAAC,iBAAiB,EAAE/C,KAAK,CAACpG,UAAU,EAAE,CAAC,aAAa,CAAC,CAAC;cAEnF,IAAI,IAAI,CAACmE,QAAQ,CAAC8F,OAAO,CAACC,UAAU,EAAE;gBACpC,IAAI,CAAC/F,QAAQ,CAACG,kBAAkB,GAAG,IAAI,CAACH,QAAQ,CAAC8F,OAAO,CAACC,UAAU;cACrE;cAEAhG,WAAW,CAAC3C,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC4C,QAAQ,CAAC;YACvC;UAEF,CAAC,EAAEiC,KAAK,CAAC3E,OAAO,CAAC,IAAI6D,IAAI,EAAE/D,IAAI,CAAC0D,IAAI,CAAC;QACvC,CAAC;QAEDnE,GAAG,GAAG;UACJqE,UAAU,CAACrE,GAAG,GAAGsF,KAAK,CAACtF,GAAG;UAC1BoE,IAAI,CAACzG,IAAI,CAAC0G,UAAU,CAAC,CAAC,CAAC;;UAEvB,IAAI,IAAI,CAAChB,QAAQ,CAACE,cAAc,IAAI,EAAE,UAAU,IAAIc,UAAU,CAAC,EAAE;YAC/D,IAAI,CAACtG,OAAO,CAAC,MAAM,EAAE;cACnB+F,OAAO,EAAE;YACX,CAAC,CAAC;YACFO,UAAU,CAACzD,QAAQ,GAAG,IAAI,CAACyC,QAAQ,CAACE,cAAc;UACpD,CAAC,CAAC;;UAGF,IAAI1E,GAAG,EAAE;YACPwF,UAAU,CAACxF,GAAG,GAAGA,GAAG;UACtB;UAEAwF,UAAU,CAACe,QAAQ,GAAGT,eAAe,CAAC,CAAC;;UAEvC,IAAIL,UAAU,EAAE;YACdD,UAAU,CAAC1B,GAAG,GAAG2B,UAAU;UAC7B,CAAC,CAAC;;UAGFU,oBAAoB,GAAG,CAAC,CAAC,CAAC;;UAE1BX,UAAU,GAAG,CAAC,CAAC;QACjB,CAAC;QAEDgF,OAAO,GAAG,CAAC;QAAA,CACV;QAEDC,MAAM,GAAG;UACP;UACA,IAAIhE,KAAK,CAAC7C,OAAO,EAAE;YACjB4B,UAAU,CAACiF,MAAM,GAAGjF,UAAU,CAACiF,MAAM,IAAI,CAAC,CAAC;YAC3CjF,UAAU,CAACiF,MAAM,CAAChE,KAAK,CAAC/C,UAAU,CAAC,GAAG+C,KAAK,CAAC1H,IAAI,CAAC,CAAC;UACpD,CAAC,MAAM;YACL,IAAI,CAACyF,QAAQ,CAACiG,MAAM,GAAG,IAAI,CAACjG,QAAQ,CAACiG,MAAM,IAAI,CAAC,CAAC;YACjD,IAAI,CAACjG,QAAQ,CAACiG,MAAM,CAAChE,KAAK,CAAC/C,UAAU,CAAC,GAAG+C,KAAK,CAAC1H,IAAI;UACrD;QACF;MAEF,CAAC,EAAE0H,KAAK,CAACvF,IAAI,CAAC,CAACU,IAAI,CAAC0D,IAAI,CAAC;IAC3B,CAAC,CAAC;EACJ;EAEAkE,wBAAwB,CAACkB,UAAU,EAAErK,UAAU,EAAEgK,QAAQ,EAAE;IACzD,MAAMM,OAAO,GAAG,EAAE;IAClBN,QAAQ,CAAC3I,OAAO,CAAC,UAAU1B,GAAG,EAAE;MAC9B,IAAI,CAACK,UAAU,CAACiD,cAAc,CAACtD,GAAG,CAAC,EAAE;QACnC2K,OAAO,CAAC7L,IAAI,CAACkB,GAAG,CAAC;MACnB;IACF,CAAC,CAAC;IAEF,IAAI2K,OAAO,CAAC/K,MAAM,EAAE;MAClB,IAAI,CAACV,OAAO,CAAC,MAAM,EAAE;QACnB+F,OAAO,EAAG,GAAEyF,UAAW,iCAAgCC,OAAO,CAACC,IAAI,CAAC,IAAI,CAAE;MAC5E,CAAC,CAAC;IACJ;EACF;EACA;AACF;AACA;AACA;AACA;;EAGE9L,IAAI,CAAC+L,KAAK,EAAE;IACV,IAAI,CAAC1F,UAAU,CAACrG,IAAI,CAAC+L,KAAK,CAAC;EAC7B;EACA;AACF;AACA;AACA;AACA;;EAGEC,GAAG,GAAG;IACJ;IACA,IAAI,CAAC3F,UAAU,CAACrG,IAAI,CAAC,IAAI,CAAC;IAC1B,IAAI,CAACI,OAAO,CAAC,KAAK,CAAC;EACrB;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEsE,SAAS,CAACuH,OAAO,EAAE;IACjB,IAAI,CAAC3F,WAAW,CAAC5B,SAAS,CAACuH,OAAO,CAAC;EACrC;EACA;AACF;AACA;AACA;AACA;AACA;AACA;;EAGElH,YAAY,CAACkH,OAAO,EAAE;IACpB,IAAI,CAAC3F,WAAW,CAACvB,YAAY,CAACkH,OAAO,CAAC;EACxC;AAEF;AAEA,SAASpM,UAAU,EAAEiC,WAAW,EAAEsE,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}