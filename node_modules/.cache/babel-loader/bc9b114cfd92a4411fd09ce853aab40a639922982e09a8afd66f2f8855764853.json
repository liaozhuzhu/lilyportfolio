{"ast":null,"code":"import CarouselItem from \"./CarouselItem.vue\";\nimport CarouselControls from \"./CarouselControls.vue\";\nimport CarouselIndicators from \"./CarouselIndicators.vue\";\nexport default {\n  name: \"CarouselVue\",\n  props: {\n    slides: {\n      type: Array,\n      required: true\n    },\n    controls: {\n      type: Boolean,\n      default: false\n    },\n    indicators: {\n      type: Boolean,\n      default: false\n    },\n    interval: {\n      type: Number,\n      default: 5000\n    }\n  },\n  components: {\n    CarouselItem,\n    CarouselControls,\n    CarouselIndicators\n  },\n  data: () => ({\n    currentSlide: 0,\n    slideInterval: null,\n    direction: \"right\"\n  }),\n  methods: {\n    setCurrentSlide(index) {\n      this.currentSlide = index;\n    },\n    prev(step = -1) {\n      const index = this.currentSlide > 0 ? this.currentSlide + step : this.slides.length - 1;\n      this.setCurrentSlide(index);\n      this.direction = \"left\";\n      this.startSlideTimer();\n    },\n    _next(step = 1) {\n      const index = this.currentSlide < this.slides.length - 1 ? this.currentSlide + step : 0;\n      this.setCurrentSlide(index);\n      this.direction = \"right\";\n    },\n    next(step = 1) {\n      this._next(step);\n      this.startSlideTimer();\n    },\n    startSlideTimer() {\n      this.stopSlideTimer();\n      this.slideInterval = setInterval(() => {\n        this._next();\n      }, this.interval);\n    },\n    stopSlideTimer() {\n      clearInterval(this.slideInterval);\n    },\n    switchSlide(index) {\n      const step = index - this.currentSlide;\n      if (step > 0) {\n        this.next(step);\n      } else {\n        this.prev(step);\n      }\n    }\n  },\n  mounted() {\n    this.startSlideTimer();\n  },\n  beforeUnmount() {\n    this.stopSlideTimer();\n  }\n};","map":{"version":3,"mappings":"AAcA,OAAOA,YAAW,MAAO,oBAAoB;AAC7C,OAAOC,gBAAe,MAAO,wBAAwB;AACrD,OAAOC,kBAAiB,MAAO,0BAA0B;AAEzD,eAAe;EACXC,IAAI,EAAE,aAAa;EACnBC,KAAK,EAAE;IACHC,MAAM,EAAE;MACJC,IAAI,EAAEC,KAAK;MACXC,QAAQ,EAAE;IACd,CAAC;IACDC,QAAQ,EAAE;MACNH,IAAI,EAAEI,OAAO;MACbC,OAAO,EAAE;IACb,CAAC;IACDC,UAAU,EAAE;MACRN,IAAI,EAAEI,OAAO;MACbC,OAAO,EAAE;IACb,CAAC;IACDE,QAAQ,EAAE;MACNP,IAAI,EAAEQ,MAAM;MACZH,OAAO,EAAE;IACb;EACJ,CAAC;EACDI,UAAU,EAAE;IAAEf,YAAY;IAAEC,gBAAgB;IAAEC;EAAmB,CAAC;EAClEc,IAAI,EAAE,OAAO;IACTC,YAAY,EAAE,CAAC;IACfC,aAAa,EAAE,IAAI;IACnBC,SAAS,EAAE;EACf,CAAC,CAAC;EACFC,OAAO,EAAE;IACLC,eAAe,CAACC,KAAK,EAAE;MACnB,IAAI,CAACL,YAAW,GAAIK,KAAK;IAC7B,CAAC;IACDC,IAAI,CAACC,IAAG,GAAI,CAAC,CAAC,EAAE;MACZ,MAAMF,KAAI,GACN,IAAI,CAACL,YAAW,GAAI,IACd,IAAI,CAACA,YAAW,GAAIO,IAAG,GACvB,IAAI,CAACnB,MAAM,CAACoB,MAAK,GAAI,CAAC;MAChC,IAAI,CAACJ,eAAe,CAACC,KAAK,CAAC;MAC3B,IAAI,CAACH,SAAQ,GAAI,MAAM;MACvB,IAAI,CAACO,eAAe,EAAE;IAC1B,CAAC;IACDC,KAAK,CAACH,IAAG,GAAI,CAAC,EAAE;MACZ,MAAMF,KAAI,GACN,IAAI,CAACL,YAAW,GAAI,IAAI,CAACZ,MAAM,CAACoB,MAAK,GAAI,IACnC,IAAI,CAACR,YAAW,GAAIO,IAAG,GACvB,CAAC;MACX,IAAI,CAACH,eAAe,CAACC,KAAK,CAAC;MAC3B,IAAI,CAACH,SAAQ,GAAI,OAAO;IAC5B,CAAC;IACDS,IAAI,CAACJ,IAAG,GAAI,CAAC,EAAE;MACX,IAAI,CAACG,KAAK,CAACH,IAAI,CAAC;MAChB,IAAI,CAACE,eAAe,EAAE;IAC1B,CAAC;IACDA,eAAe,GAAG;MACd,IAAI,CAACG,cAAc,EAAE;MACrB,IAAI,CAACX,aAAY,GAAIY,WAAW,CAAC,MAAM;QACnC,IAAI,CAACH,KAAK,EAAE;MAChB,CAAC,EAAE,IAAI,CAACd,QAAQ,CAAC;IACrB,CAAC;IACDgB,cAAc,GAAG;MACbE,aAAa,CAAC,IAAI,CAACb,aAAa,CAAC;IACrC,CAAC;IACDc,WAAW,CAACV,KAAK,EAAE;MACf,MAAME,IAAG,GAAIF,KAAI,GAAI,IAAI,CAACL,YAAY;MACtC,IAAIO,IAAG,GAAI,CAAC,EAAE;QACV,IAAI,CAACI,IAAI,CAACJ,IAAI,CAAC;MACnB,OAAO;QACH,IAAI,CAACD,IAAI,CAACC,IAAI,CAAC;MACnB;IACJ;EACJ,CAAC;EACDS,OAAO,GAAG;IACN,IAAI,CAACP,eAAe,EAAE;EAC1B,CAAC;EACDQ,aAAa,GAAG;IACZ,IAAI,CAACL,cAAc,EAAE;EACzB;AACJ,CAAC","names":["CarouselItem","CarouselControls","CarouselIndicators","name","props","slides","type","Array","required","controls","Boolean","default","indicators","interval","Number","components","data","currentSlide","slideInterval","direction","methods","setCurrentSlide","index","prev","step","length","startSlideTimer","_next","next","stopSlideTimer","setInterval","clearInterval","switchSlide","mounted","beforeUnmount"],"sourceRoot":"","sources":["/Users/liaozhu/cs-projects/lilyportfolio/src/components/carousel/CarouselVue.vue"],"sourcesContent":["<template>\n    <div class=\"carousel\">\n        <div class=\"carousel-inner\">\n            <carousel-indicators v-if=\"indicators\" :total=\"slides.length\" :current-index=\"currentSlide\"\n                @switch=\"switchSlide($event)\"></carousel-indicators>\n            <carousel-item v-for=\"(slide, index) in slides\" :slide=\"slide\" :key=\"`item-${index}`\"\n                :current-slide=\"currentSlide\" :index=\"index\" :direction=\"direction\" @mouseenter=\"stopSlideTimer\"\n                @mouseout=\"startSlideTimer\"></carousel-item>\n            <carousel-controls v-if=\"controls\" @prev=\"prev\" @next=\"next\"></carousel-controls>\n        </div>\n    </div>\n</template>\n\n<script>\nimport CarouselItem from \"./CarouselItem.vue\";\nimport CarouselControls from \"./CarouselControls.vue\";\nimport CarouselIndicators from \"./CarouselIndicators.vue\";\n\nexport default {\n    name: \"CarouselVue\",\n    props: {\n        slides: {\n            type: Array,\n            required: true,\n        },\n        controls: {\n            type: Boolean,\n            default: false,\n        },\n        indicators: {\n            type: Boolean,\n            default: false,\n        },\n        interval: {\n            type: Number,\n            default: 5000,\n        },\n    },\n    components: { CarouselItem, CarouselControls, CarouselIndicators },\n    data: () => ({\n        currentSlide: 0,\n        slideInterval: null,\n        direction: \"right\",\n    }),\n    methods: {\n        setCurrentSlide(index) {\n            this.currentSlide = index;\n        },\n        prev(step = -1) {\n            const index =\n                this.currentSlide > 0\n                    ? this.currentSlide + step\n                    : this.slides.length - 1;\n            this.setCurrentSlide(index);\n            this.direction = \"left\";\n            this.startSlideTimer();\n        },\n        _next(step = 1) {\n            const index =\n                this.currentSlide < this.slides.length - 1\n                    ? this.currentSlide + step\n                    : 0;\n            this.setCurrentSlide(index);\n            this.direction = \"right\";\n        },\n        next(step = 1) {\n            this._next(step);\n            this.startSlideTimer();\n        },\n        startSlideTimer() {\n            this.stopSlideTimer();\n            this.slideInterval = setInterval(() => {\n                this._next();\n            }, this.interval);\n        },\n        stopSlideTimer() {\n            clearInterval(this.slideInterval);\n        },\n        switchSlide(index) {\n            const step = index - this.currentSlide;\n            if (step > 0) {\n                this.next(step);\n            } else {\n                this.prev(step);\n            }\n        },\n    },\n    mounted() {\n        this.startSlideTimer();\n    },\n    beforeUnmount() {\n        this.stopSlideTimer();\n    },\n};\n</script>\n\n<style scoped>\n.carousel {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    height: auto;\n}\n\n.carousel-inner {\n    position: relative;\n    width: 550px;\n    height: 650px;\n    overflow: hidden;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}